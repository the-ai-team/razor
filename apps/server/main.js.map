{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///external commonjs \"tslib\"","webpack:///../../libs/store/src/index.ts","webpack:///../../libs/store/src/lib/payloads/index.ts","webpack:///../../libs/store/src/lib/payloads/effects.ts","webpack:///../../libs/store/src/lib/payloads/reducers.ts","webpack:///../../libs/store/src/lib/store.ts","webpack:///external commonjs \"@rematch/core\"","webpack:///../../libs/store/src/lib/effects/index.ts","webpack:///../../libs/store/src/lib/effects/effects.ts","webpack:///../../libs/store/src/lib/effects/logger.ts","webpack:///../../libs/models/src/index.ts","webpack:///../../libs/models/src/lib/converters/index.ts","webpack:///../../libs/models/src/lib/converters/player.ts","webpack:///../../libs/models/src/lib/sockets/index.ts","webpack:///../../libs/models/src/lib/sockets/leaderboard.ts","webpack:///external commonjs \"zod\"","webpack:///../../libs/models/src/lib/sockets/player.ts","webpack:///../../libs/constants/src/index.ts","webpack:///../../libs/constants/src/lib/client.ts","webpack:///../../libs/constants/src/lib/constants.ts","webpack:///../../libs/constants/src/lib/race.ts","webpack:///../../libs/constants/src/lib/room.ts","webpack:///../../libs/constants/src/lib/socket.ts","webpack:///../../libs/models/src/lib/sockets/playerLog.ts","webpack:///../../libs/models/src/lib/sockets/tournament.ts","webpack:///../../libs/models/src/lib/sockets/protocol-data.ts","webpack:///../../libs/models/src/lib/sockets/protocol-schemas.ts","webpack:///../../libs/models/src/lib/sockets/race.ts","webpack:///../../libs/models/src/lib/sockets/state-model.ts","webpack:///../../libs/models/src/lib/sockets/protocol-to-schema-map.ts","webpack:///../../libs/models/src/lib/sockets/protocols.ts","webpack:///../../libs/models/src/lib/sockets/protocol-to-type-map.ts","webpack:///../../libs/models/src/lib/state/index.ts","webpack:///../../libs/models/src/lib/state/leaderboard.ts","webpack:///../../libs/models/src/lib/state/log-message.ts","webpack:///../../libs/models/src/lib/state/player.ts","webpack:///../../libs/models/src/lib/state/race.ts","webpack:///../../libs/models/src/lib/state/state-model.ts","webpack:///../../libs/models/src/lib/state/tournament.ts","webpack:///../../libs/models/src/lib/state/uid.ts","webpack:///../../libs/util/src/index.ts","webpack:///../../libs/util/src/lib/compute-race-duration.ts","webpack:///../../libs/util/src/lib/extract-ids.ts","webpack:///../../libs/util/src/lib/generate-avatar-link.ts","webpack:///../../libs/util/src/lib/generate-leaderboard.ts","webpack:///../../libs/util/src/lib/generate-uid.ts","webpack:///external commonjs \"nanoid\"","webpack:///../../libs/util/src/lib/give-zero-padding.ts","webpack:///../../libs/util/src/lib/pubsub.ts","webpack:///../../libs/util/src/lib/room-tournament-id-converter.ts","webpack:///../../libs/store/src/lib/effects/player.ts","webpack:///../../libs/store/src/lib/raisers/index.ts","webpack:///../../libs/store/src/lib/raisers/payload.ts","webpack:///../../libs/store/src/lib/raisers/player.ts","webpack:///../../libs/store/src/lib/raisers/race.ts","webpack:///../../libs/store/src/lib/raisers/tournament.ts","webpack:///../../libs/store/src/lib/effects/race.ts","webpack:///../../libs/store/src/lib/effects/replacers.ts","webpack:///../../libs/store/src/lib/effects/tournament.ts","webpack:///../../libs/store/src/lib/initialState.ts","webpack:///../../libs/store/src/lib/reducers/index.ts","webpack:///../../libs/store/src/lib/reducers/add.ts","webpack:///../../libs/store/src/lib/reducers/logger.ts","webpack:///external commonjs \"lodash\"","webpack:///../../libs/store/src/lib/reducers/remove.ts","webpack:///../../libs/store/src/lib/reducers/replace.ts","webpack:///../../libs/store/src/lib/reducers/update.ts","webpack:///external commonjs \"express\"","webpack:///external node-commonjs \"http\"","webpack:///external commonjs \"socket.io\"","webpack:///./src/controllers/index.ts","webpack:///./src/controllers/clear-player.controller.ts","webpack:///./src/models/index.ts","webpack:///./src/models/pubsub-events.ts","webpack:///./src/services/index.ts","webpack:///./src/services/logger/index.ts","webpack:///./src/services/logger/logger.ts","webpack:///./src/stores/index.ts","webpack:///./src/stores/token-player-map.ts","webpack:///./src/services/logger/cloud-logger.ts","webpack:///external commonjs \"winston\"","webpack:///./src/services/logger/levels.ts","webpack:///./src/services/logger/local-logger.ts","webpack:///./src/services/main-utils/index.ts","webpack:///./src/services/main-utils/check-reconnected.ts","webpack:///./src/services/pubsub.ts","webpack:///./src/services/main-utils/publish-on-receive.ts","webpack:///./src/services/main-utils/send-data-to-clients.ts","webpack:///./src/controllers/create-tournament.controller.ts","webpack:///./src/controllers/inform-timeout.controller.ts","webpack:///./src/utils/check-race-complete.ts","webpack:///./src/controllers/start-race.controller.ts","webpack:///./src/utils/index.ts","webpack:///./src/utils/authtoken.ts","webpack:///external commonjs \"uuid\"","webpack:///./src/utils/generateRaceText.ts","webpack:///external commonjs \"axios\"","webpack:///./src/controllers/join-tournament.controller.ts","webpack:///./src/controllers/race-end.controller.ts","webpack:///./src/controllers/update-type-logs.controller/index.ts","webpack:///./src/controllers/update-type-logs.controller/listen-to-client.ts","webpack:///./src/controllers/update-type-logs.controller/type-log-queues.ts","webpack:///./src/controllers/update-type-logs.controller/send-logs-to-players.ts","webpack:///./src/socket.ts","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = require(\"tslib\");","export * from './lib/payloads';\nexport * from './lib/store';\n","export * from './effects';\nexport * from './reducers';\n","// ### [Payloads] Data models for the effect payloads ### //\n\nimport {\n  AppPlayer,\n  AppPlayerId,\n  AppPlayerLog,\n  AppRaceId,\n  AppSnapshot,\n  AppTournamentId,\n  AppTournamentState,\n} from '@razor/models';\n\nexport type JoinPlayerPayload = {\n  receivedTournamentId: AppTournamentId | '';\n  playerName: string;\n};\n\nexport type AddPlayerPayload = {\n  playerId: AppPlayerId;\n  player: AppPlayer;\n};\n\nexport type ClearPlayerPayload = {\n  playerId: AppPlayerId;\n};\n\nexport type SetTournamentStatePayload = {\n  tournamentId: AppTournamentId;\n  tournamentState: AppTournamentState;\n};\n\nexport type StartRacePayload = {\n  tournamentId: AppTournamentId;\n  /** Id of player who started the race */\n  playerId: AppPlayerId;\n  raceText: string;\n};\n\nexport type EndRacePayload = {\n  raceId: AppRaceId;\n};\n\nexport type SendTypeLogPayload = {\n  raceId: AppRaceId;\n  playerId: AppPlayerId;\n  /** Timestamp, and text length from players machine */\n  playerLog: AppPlayerLog | AppPlayerLog[];\n};\n\nexport type ReplaceFullStatePayload = {\n  parentState: AppSnapshot;\n};\n","// ### [Payloads] Data models for the reducer payloads ### //\n\nimport {\n  AppErrorLog,\n  AppErrorTimestamp,\n  AppLeaderboard,\n  AppPlayer,\n  AppPlayerId,\n  AppPlayerLog,\n  AppPlayerLogId,\n  AppRace,\n  AppRaceId,\n  AppSnapshot,\n  AppTournament,\n  AppTournamentId,\n} from '@razor/models';\n\nexport type AddTournamentReducerPayload = {\n  tournamentId: AppTournamentId;\n  tournament: AppTournament;\n};\n\nexport type AddRaceReducerPayload = {\n  raceId: AppRaceId;\n  race: AppRace;\n};\n\nexport type AddPlayerReducerPayload = {\n  tournamentId: AppTournamentId;\n  playerId: AppPlayerId;\n  player: AppPlayer;\n};\n\nexport type AddLeaderboardReducerPayload = {\n  leaderboardId: AppRaceId;\n  leaderboard: AppLeaderboard;\n};\n\nexport type UpdatePlayerReducerPayload = {\n  playerId: AppPlayerId;\n  player: AppPlayer;\n};\n\nexport type UpdateTournamentReducerPayload = {\n  tournamentId: AppTournamentId;\n  tournament: AppTournament;\n};\n\nexport type UpdateRaceReducerPayload = {\n  raceId: AppRaceId;\n  race: AppRace;\n};\n\nexport type UpdatePlayerLogReducerPayload = {\n  playerLogId: AppPlayerLogId;\n  playerLog: AppPlayerLog | AppPlayerLog[];\n};\n\nexport type RemovePlayerReducerPayload = {\n  tournamentId: AppTournamentId;\n  playerId: AppPlayerId;\n};\n\nexport type RemoveTournamentReducerPayload = {\n  tournamentId: AppTournamentId;\n};\n\nexport type LogErrorReducerPayload = {\n  errorLog: AppErrorLog;\n  errorTimestamp: AppErrorTimestamp;\n};\n\nexport type ReplaceFullStateReducerPayload = {\n  parentState: AppSnapshot;\n};\n","import { AppStateModel } from '@razor/models';\nimport {\n  createModel,\n  init,\n  Models,\n  RematchDispatch,\n  RematchRootState,\n} from '@rematch/core';\n\nimport { effects } from './effects';\nimport { initialState } from './initialState';\nimport * as reducers from './reducers';\n\nexport const game = createModel<RootModel>()({\n  state: initialState,\n  reducers,\n  effects,\n});\n\nexport interface RootModel extends Models<RootModel> {\n  game: typeof game;\n}\n\n/** Models for store\n *\n * `game` model has state, reducers and effects.\n * `state` will be initialized with initialState.\n * `reducers` contain core functionalities with store such as adding, updating, deleting.\n * `effects` contain calculating and generating operations which will pass down to reducers to add to the store.\n */\nexport const models: RootModel = { game };\n\n/** Redux rematch store\n *\n * Store has one model; game.\n */\nexport const store = init({\n  models,\n});\n\n/** Function to initialize store\n *\n * This function will be used in tests to initialize many stores with custom initial state.\n * @param initialState - Initial state model\n * @returns Generated redux rematch store\n */\nexport const initializeStore = (initialState: AppStateModel): Store => {\n  const game = createModel<RootModel>()({\n    state: initialState,\n    reducers,\n    effects,\n  });\n\n  const models: RootModel = { game };\n  const store = init({\n    models,\n  });\n  return store;\n};\n\nexport type Store = typeof store;\nexport type Dispatch = RematchDispatch<RootModel>;\nexport type RootState = RematchRootState<RootModel>;\n","module.exports = require(\"@rematch/core\");","export * from './effects';\n","/* eslint-disable @typescript-eslint/explicit-function-return-type */\nimport { AppMessageLog } from '@razor/models';\n\nimport {\n  AddPlayerPayload,\n  ClearPlayerPayload,\n  EndRacePayload,\n  JoinPlayerPayload,\n  ReplaceFullStatePayload,\n  SendTypeLogPayload,\n  SetTournamentStatePayload,\n  StartRacePayload,\n} from '../payloads';\nimport { Dispatch, RootState } from '../store';\n\nimport { sendLogMessage } from './logger';\nimport { addPlayer, clearPlayer, joinPlayer, sendTypeLog } from './player';\nimport { endRace, startRace } from './race';\nimport { replaceFullState } from './replacers';\nimport { setTournamentState } from './tournament';\n\n/** Effects functions of the store\n *\n * Effects are calculating and generating operations which will pass the data to the reducers to dispatch to the store.\n */\nexport const effects = (dispatch: Dispatch) => ({\n  joinPlayer: (payload: JoinPlayerPayload, state: RootState) =>\n    joinPlayer(dispatch, payload, state),\n  addPlayer: (payload: AddPlayerPayload, state: RootState) =>\n    addPlayer(dispatch, payload, state),\n  clearPlayer: (payload: ClearPlayerPayload, state: RootState) =>\n    clearPlayer(dispatch, payload, state),\n  setTournamentState: (payload: SetTournamentStatePayload, state: RootState) =>\n    setTournamentState(dispatch, payload, state),\n  startRace: (payload: StartRacePayload, state: RootState) =>\n    startRace(dispatch, payload, state),\n  endRace: (payload: EndRacePayload, state: RootState) =>\n    endRace(dispatch, payload, state),\n  sendTypeLog: (payload: SendTypeLogPayload, state: RootState) =>\n    sendTypeLog(dispatch, payload, state),\n  sendLogMessage: (payload: AppMessageLog) => sendLogMessage(dispatch, payload),\n  replaceFullState: (payload: ReplaceFullStatePayload) =>\n    replaceFullState(dispatch, payload),\n});\n","// ### [Effects] Logger operations ### //\n\nimport {\n  AppIdNumberType,\n  AppMessageLog,\n  AppMessageLogType,\n} from '@razor/models';\nimport { generateUid } from '@razor/util';\n\nimport { Dispatch } from '../store';\n\n/** Effect function for sending a log message.\n * This effect will check the type of the log message which comes from the payload\n * and do the relevant operation.\n *\n * @param {Dispatch} dispatch - The dispatch function from the store\n * @param {AppMessageLog} payload - The payload which contains the log message\n *\n * ### Related reducers and effects\n * - logErrorReducer\n */\nexport const sendLogMessage = (\n  dispatch: Dispatch,\n  payload: AppMessageLog,\n): void => {\n  /** Current unix timestamp */\n  const timestamp: number = new Date().getTime();\n  const { message, code, related, type } = payload;\n\n  /** General random id */\n  const randomId = generateUid(AppIdNumberType.General);\n\n  switch (type) {\n    // If the type is an error, send the error to the state and log in to the console as an error.\n    case AppMessageLogType.Error:\n      console.error(`[Error ${code}]: ${message} (${related})`);\n\n      dispatch.game.logErrorReducer({\n        errorLog: {\n          message,\n          code,\n          related,\n        },\n        errorTimestamp: `${timestamp}-${randomId}`,\n      });\n      break;\n    // If the type is a warning, log in to the console as a warning.\n    case AppMessageLogType.Warn:\n      console.warn(`[Warn ${code}]: ${message} (${related})`);\n      break;\n    // If the type is info, log in to the console as info.\n    case AppMessageLogType.Info:\n      console.info(`[Info ${code}]: ${message} (${related})`);\n      break;\n  }\n};\n","export * from './lib/converters';\nexport * from './lib/sockets';\nexport * from './lib/state';\n","export * from './player';\n","import { PlayerLog, PlayerState } from '../sockets';\nimport { AppPlayerLog, AppPlayerState } from '../state';\n\nexport function appPlayerStateToPlayerState(\n  state: AppPlayerState,\n): PlayerState {\n  return state as unknown as PlayerState;\n}\n\nexport function playerStateToAppPlayerState(\n  state: PlayerState,\n): AppPlayerState {\n  return state as unknown as AppPlayerState;\n}\n\nexport function playerLogsToAppPlayerLogs(logs: PlayerLog[]): AppPlayerLog[] {\n  return logs as unknown as AppPlayerLog[];\n}\n","export * from './leaderboard';\nexport * from './player';\nexport * from './playerLog';\nexport * from './protocol-data';\nexport * from './protocol-schemas';\nexport * from './protocol-to-schema-map';\nexport * from './protocol-to-type-map';\nexport * from './protocols';\nexport * from './race';\nexport * from './state-model';\nexport * from './tournament';\n","import { z } from 'zod';\n\nimport { playerIdSchema } from './player';\n\n// ==== Enums ==== //\n/** Represents the different ways a player can finish the race. */\nexport enum PlayerStatus {\n  /** Player finished the race by completing the text */\n  Complete = 'complete',\n  /** Player finished by timeout */\n  Timeout = 'timeout',\n}\n\n// ==== Compound Schemas ==== //\nexport const leaderboardSchema = z.array(\n  z.object({\n    playerId: playerIdSchema,\n    status: z.nativeEnum(PlayerStatus),\n    values: z\n      .object({\n        wpm: z.number(),\n        elapsedTime: z.number(),\n      })\n      .or(\n        z.object({\n          distance: z.number(),\n        }),\n      ),\n  }),\n);\n","module.exports = require(\"zod\");","import { PLAYER_NAME_RANGE } from '@razor/constants';\nimport { z } from 'zod';\n\n// ==== Types ==== //\n/** Player id template literal */\nexport type PlayerId = z.input<typeof playerIdSchema>;\nexport type AuthToken = string;\nexport type SocketId = string;\n\n// ==== Enums ==== //\nexport enum PlayerState {\n  /** **Player idle**\n   *\n   * When a player is not in a race but in the lobby.\n   *\n   * Possible actions:\n   * In the lobby, In the leaderboard, etc.\n   */\n  Idle = 'idle',\n  /** **Player racing**\n   *\n   * When a player is in a race.\n   *\n   * Possible actions:\n   * In race only.\n   */\n  Racing = 'racing',\n}\n\n// ==== Primary Schemas ==== //\nexport const playerIdSchema = z.custom<`P:${string}`>(id =>\n  /^P:[a-zA-Z0-9]{8}$/.test(id as string),\n);\n\nexport const playerNameSchema = z\n  .string()\n  .min(PLAYER_NAME_RANGE[0])\n  .max(PLAYER_NAME_RANGE[1])\n  .regex(/^[a-zA-Z0-9_]+$/);\n\n// ==== Compound Schemas ==== //\nexport const playerSchema = z.object({\n  id: playerIdSchema,\n  name: playerNameSchema,\n  avatarLink: z.string().url(),\n  state: z.nativeEnum(PlayerState),\n});\n\n// ==== Interfaces ==== //\nexport type Player = z.infer<typeof playerSchema>;\nexport type PlayerProfile = Omit<Player, 'state'>;\n","export * from './lib/client';\nexport * from './lib/constants';\nexport * from './lib/race';\nexport * from './lib/room';\nexport * from './lib/socket';\n","// Waiting time for server response.\nexport const REQUEST_WAITING_TIME = 8000;\n\n// Client type log sending interval.\nexport const CLIENT_TYPE_LOG_INTERVAL = 1000;\n\n//  Race ready countdown time.\nexport const RACE_READY_COUNTDOWN = 5;\n","// eslint-disable-next-line unused-imports/no-unused-imports\nimport { RACE_READY_COUNTDOWN } from './client';\n\n/** Average WPM of a person who types on a physical keyboard.\n *\n * Use by,\n * - compute timeout util function\n */\nexport const AVERAGE_WPM = 40;\n\n/** Number of chars to create the unique part of the general ID.\n *\n * Example - **a1Bl365L**\n *\n * Use by\n * - generate uid util function (which will pass to nanoid)\n */\nexport const GENERAL_ID_LENGTH = 8;\n\n/** Maximum allowed text length\n *\n * Use by,\n * - text length of player log validation in sockets data models\n */\nexport const MAX_ALLOWED_TEXT_LENGTH = 1000;\n\n/** Max errors log count keeps on the state.\n *\n * Use by\n * - logger reducer\n */\nexport const MAX_ERR_LOGS_COUNT = 1024;\n\n/** Chars & digit collection to use to pick randomly and generate id.\n *\n * Use by\n * - nanoid (as a custom alphabet)\n */\nexport const NANOID_ALPHABET =\n  'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n\n/** Number of chars to create the unique part of player ID.\n *\n * Example - P:**a1Bl365L**\n *\n * Use by\n * - generate uid util function (which will pass to nanoid)\n */\nexport const PLAYER_ID_LENGTH = 8;\n\n/** Required player name range length\n *\n * Minimum and maximum length respectively.\n *\n * Use by,\n * - player name validation in sockets data models\n */\nexport const PLAYER_NAME_RANGE = [3, 12] as const;\n\n/** Number of digits to be included in the index part of race ID.\n *\n * Example - T:sktm2JVn-R:**050**\n *\n * Use by\n * - start countdown effect while creating race id.\n *\n */\nexport const RACE_ID_LENGTH = 3;\n\n/** Number of chars to create the unique part of tournament ID.\n *\n * Example - T:**a1Bl365L**\n *\n * Use by\n * - generate uid util function (which will pass to nanoid)\n */\nexport const TOURNAMENT_ID_LENGTH = 8;\n\n/** After server race timer ends, the server waits for a short time to receive race ending (either complete or timeout) logs from all players.\n * This waiting period accounts for players who may have started the race with a delay.\n * If logs are not received from all players by the end of the waiting period, the server will forcibly end the race.\n *\n * (Client starting timer {@link RACE_READY_COUNTDOWN} + Additional wait time)\n *\n */\nexport const RACE_END_WAIT_TIME = 10; // seconds\n","// Server type log sending interval.\nexport const SERVER_TYPE_LOG_INTERVAL = 1000;\n","export const MIN_ALLOWED_PLAYERS = 2;\nexport const MAX_ALLOWED_PLAYERS = 10;\n","// After the user disconnects, the server will check if the user reconnected after this period.\nexport const RECONNECT_WAITING_TIME = 10000; // 10 seconds\n","import { MAX_ALLOWED_TEXT_LENGTH } from '@razor/constants';\nimport { z } from 'zod';\n\nimport { playerIdSchema } from './player';\nimport { timestampSchema } from './tournament';\n\n// ==== Types ==== //\n/** Type for time-logs when players are typing */\nexport type PlayerLog = z.infer<typeof playerLogSchema>;\nexport type PlayerLogId = z.input<typeof playerLogIdSchema>;\n\n/** Log collection or partial collection for a specific player. */\nexport type PlayerLogsCollection = z.infer<typeof playerLogsCollectionSchema>;\n\n// ==== Primary Schemas ==== //\nexport const playerLogIdSchema =\n  z.custom<`T:${string}-R:${string}-P:${string}`>(id =>\n    /^T:[a-zA-Z0-9]{8}-R:[a-zA-Z0-9]{3}-P:[a-zA-Z0-9]{8}$/.test(id as string),\n  );\n\n// ==== Compound Schemas ==== //\nexport const playerLogSchema = z.object({\n  /** Correctly typed length by player */\n  textLength: z.number().min(0).max(MAX_ALLOWED_TEXT_LENGTH),\n  /** Timestamp when player typed the last character */\n  timestamp: timestampSchema,\n});\n\nexport const playerLogsCollectionSchema = z.record(\n  playerIdSchema,\n  z.array(playerLogSchema),\n);\n","import { TOURNAMENT_ID_LENGTH } from '@razor/constants';\nimport { z } from 'zod';\n\n// ==== Types ==== //\n/** Tournament id template literal */\nexport type TournamentId = z.input<typeof tournamentIdSchema>;\n\n/** Room id */\nexport type RoomId = z.input<typeof roomIdSchema>;\n\n// ==== Enums ==== //\nexport enum TournamentState {\n  /** **Lobby**\n   *\n   * Every player is in the lobby.\n   * (Race is not started yet.)\n   */\n  Lobby = 'lobby',\n  /** **Ready**\n   *\n   * Two or more players available in the lobby.\n   * (Race is not started yet.)\n   */\n  Ready = 'ready',\n  /** **Countdown**\n   *\n   * A player pressed the `Play` button.\n   */\n  Countdown = 'countdown',\n  /** **Race**\n   *\n   * The race is ongoing.\n   */\n  Race = 'race',\n  /** **Leaderboard**\n   *\n   * The race is finished.\n   */\n  Leaderboard = 'leaderboard',\n  /** **Empty**\n   *\n   * Lobby has no players. Waiting to destroy the lobby.\n   */\n  Empty = 'empty',\n}\n\n// ==== Primary Schemas ==== //\nexport const timestampSchema = z\n  .number()\n  .int()\n  .nonnegative()\n  .refine(\n    value => value.toString().length === 13,\n    'Timestamp must be in milliseconds (13 digits).',\n  );\n\nexport const tournamentIdSchema = z.custom<`T:${string}`>(id =>\n  /^T:[a-zA-Z0-9]{8}$/.test(id as string),\n);\n\n/** Room id\n * Room id is the last 8 characters of the tournament id.\n * Tournament id - T:abcdef12\n * Room id - abcdef12\n */\nexport const roomIdSchema = z\n  .string()\n  .length(TOURNAMENT_ID_LENGTH)\n  .regex(/^[a-zA-Z0-9_]+$/);\n","import { z } from 'zod';\n\nimport { AppLeaderboard, AppStateModel } from '../state';\n\nimport { PlayerId } from './player';\nimport {\n  clearPlayerSchema,\n  informTimeoutSchema,\n  initialClientDataSchema,\n  playerJoinSchema,\n  sendTypeLogSchema,\n  startRaceAcceptSchema,\n  startRaceRequestSchema,\n  updateTypeLogsSchema,\n} from './protocol-schemas';\nimport { RaceId } from './race';\nimport { TournamentId } from './tournament';\n\n// This model is use when client subscribe and listen to socket events\n// This contains self player data to do client side operations on store, when a new socket event is received\nexport interface ClientStoredPlayerData<T> {\n  /** Player's tournament id */\n  tournamentId: TournamentId;\n  /** Player's id which saved on memory which is used to identify the player who received the event. */\n  savedPlayerId: PlayerId;\n  /** Data related to event.\n   * In most of the events, this field contains another player's data.\n   * Therefore savedPlayerId is not relaxant to player details in this field.\n   */\n  data: T;\n}\n\n// Data sent from the client to the server with socket establishment\nexport type InitialClientData = z.infer<typeof initialClientDataSchema>;\n\n// This interface is used to sync the client with the server.\nexport type Snapshot = Omit<AppStateModel, 'errorLogsModel'>;\n\n// Data sent from the server to the client after socket establishment to sync\n// We are avoiding inferring the schema directly because it makes unnecessary type conversions while taking data from store to socket data model\nexport interface InitialServerData {\n  playerId: PlayerId;\n  tournamentId: TournamentId;\n  /** Game snapshot */\n  snapshot: Snapshot;\n}\n\nexport type PlayerJoinData = z.infer<typeof playerJoinSchema>;\nexport type ClearPlayerData = z.infer<typeof clearPlayerSchema>;\n\nexport type StartRaceRequestData = z.infer<typeof startRaceRequestSchema>;\nexport type StartRaceAcceptData = z.infer<typeof startRaceAcceptSchema>;\n\nexport type SendTypeLogData = z.infer<typeof sendTypeLogSchema>;\nexport type UpdateTypeLogsData = z.infer<typeof updateTypeLogsSchema>;\n\nexport type InformTimeoutData = z.infer<typeof informTimeoutSchema>;\nexport type SendLeaderboardData = {\n  raceId: RaceId;\n  leaderboard: AppLeaderboard;\n};\n","import { z } from 'zod';\n\nimport { leaderboardSchema } from './leaderboard';\nimport { playerIdSchema, playerNameSchema, playerSchema } from './player';\nimport { playerLogSchema, playerLogsCollectionSchema } from './playerLog';\n// eslint-disable-next-line unused-imports/no-unused-imports\nimport { SocketProtocols } from './protocols';\nimport { raceIdSchema } from './race';\nimport { stateModelSchema } from './state-model';\nimport { roomIdSchema, tournamentIdSchema } from './tournament';\n\n// Following schemas to be used when data sent through socket.\n// Each schema is related to a protocol defined in {@link SocketProtocols}\n\n/**\n * Related protocol - {@link SocketProtocols.AuthTokenTransfer}\n */\nexport const authTokenTransferSchema = z.string();\n\n/**\n * Related protocol - {@link SocketProtocols.JoinLobbyRequest} and {@link SocketProtocols.CreateLobbyRequest}\n */\nexport const initialClientDataSchema = z.object({\n  playerName: playerNameSchema,\n  roomId: roomIdSchema.optional(),\n});\n\n/**\n * Related protocol - {@link SocketProtocols.CreateLobbyAccept} and {@link SocketProtocols.JoinLobbyAccept}\n */\nexport const initialServerDataSchema = z.object({\n  playerId: playerIdSchema,\n  tournamentId: tournamentIdSchema,\n  snapshot: stateModelSchema,\n});\n\n/**\n * Related protocol - {@link SocketProtocols.PlayerJoin}\n */\nexport const playerJoinSchema = z.object({\n  player: playerSchema,\n});\n\n/**\n * Related protocol - {@link SocketProtocols.ClearPlayer}\n */\nexport const clearPlayerSchema = z.object({\n  playerId: playerIdSchema,\n});\n\n/**\n * Related protocol - {@link SocketProtocols.StartRaceRequest}\n */\nexport const startRaceRequestSchema = z.object({});\n\n/**\n * Related protocol - {@link SocketProtocols.StartRaceAccept}\n */\nexport const startRaceAcceptSchema = z.object({\n  raceId: raceIdSchema,\n  raceStartedBy: playerIdSchema,\n  raceText: z.string(),\n});\n\n/**\n * Related protocol - {@link SocketProtocols.SendTypeLog}\n */\nexport const sendTypeLogSchema = z.object({\n  raceId: raceIdSchema,\n  playerLogs: z.array(playerLogSchema),\n});\n\n/**\n * Related protocol - {@link SocketProtocols.UpdateTypeLogs}\n */\nexport const updateTypeLogsSchema = z.object({\n  raceId: raceIdSchema,\n  playerLogs: playerLogsCollectionSchema,\n});\n\n/**\n * Related protocol - {@link SocketProtocols.InformTimeout}\n */\nexport const informTimeoutSchema = z.object({\n  raceId: raceIdSchema,\n});\n\n/**\n * Related protocol - {@link SocketProtocols.SendLeaderboard}\n */\nexport const sendLeaderboardSchema = z.object({\n  raceId: raceIdSchema,\n  leaderboard: leaderboardSchema,\n});\n\nexport type ProtocolSchemaTypes =\n  | typeof authTokenTransferSchema\n  | typeof initialClientDataSchema\n  | typeof initialServerDataSchema\n  | typeof playerJoinSchema\n  | typeof startRaceRequestSchema\n  | typeof startRaceAcceptSchema\n  | typeof sendTypeLogSchema\n  | typeof updateTypeLogsSchema\n  | typeof informTimeoutSchema\n  | typeof sendLeaderboardSchema;\n","import { z } from 'zod';\n\nimport { PlayerId, PlayerProfile } from './player';\nimport { PlayerLogsCollection } from './playerLog';\n\n// ==== Primary Schemas ==== //\nexport const raceIdSchema = z.custom<`T:${string}-R:${string}`>(id =>\n  /^T:[a-zA-Z0-9]{8}-R:[a-zA-Z0-9]{3}$/.test(id as string),\n);\n\n// ==== Interfaces ==== //\n// Note: `Race` does not need to be a schema; because it's only bound to the server-to-client communication.\nexport interface Race {\n  /** Unique race id */\n  id: RaceId;\n  /** Race text which players are typing  */\n  text: string;\n  /** Race timeout timer (in seconds) which is calculated by the server.  */\n  timeoutDuration: number;\n  /** Race started timestamp from the server side after the player pressed the Play button\n   *\n   * This will be used to calculate the timeout of the race.\n   */\n  startedTimestamp: number;\n  /** Players data for a specific race\n   *\n   * It can be empty before players send the starting message to the server.\n   */\n  playerLogs: PlayerLogsCollection[];\n  /** Player profiles */\n  playerProfiles: PlayerProfile[];\n  /** Player who pressed the start button */\n  raceStartedBy: PlayerId;\n}\n\n// ==== Types ==== //\n// Race id template literal\nexport type RaceId = z.input<typeof raceIdSchema>;\n","import { z } from 'zod';\n\nimport { leaderboardSchema } from './leaderboard';\nimport { playerIdSchema, PlayerState } from './player';\nimport { playerLogIdSchema } from './playerLog';\nimport { raceIdSchema } from './race';\nimport { tournamentIdSchema, TournamentState } from './tournament';\n\n// ==== Schemas ==== //\nexport const stateModelSchema = z.object({\n  tournamentsModel: z.record(\n    tournamentIdSchema,\n    z.object({\n      state: z.nativeEnum(TournamentState),\n      raceIds: z.array(raceIdSchema),\n      playerIds: z.array(playerIdSchema),\n    }),\n  ),\n  playersModel: z.record(\n    playerIdSchema,\n    z.object({\n      name: z.string(),\n      avatarLink: z.string(),\n      state: z.nativeEnum(PlayerState),\n      tournamentId: tournamentIdSchema,\n    }),\n  ),\n  racesModel: z.record(\n    raceIdSchema,\n    z.object({\n      text: z.string(),\n      timeoutDuration: z.number(),\n      startedTimestamp: z.number(),\n      players: z.record(\n        playerIdSchema,\n        z.object({\n          name: z.string(),\n          avatarLink: z.string(),\n        }),\n      ),\n      isOnGoing: z.boolean(),\n      raceStartedBy: playerIdSchema,\n    }),\n  ),\n  leaderboardsModel: z.record(raceIdSchema, leaderboardSchema),\n  playerLogsModel: z.record(\n    playerLogIdSchema,\n    z.array(\n      z.object({\n        timestamp: z.number(),\n        textLength: z.number(),\n      }),\n    ),\n  ),\n});\n","import {\n  authTokenTransferSchema,\n  clearPlayerSchema,\n  informTimeoutSchema,\n  initialClientDataSchema,\n  initialServerDataSchema,\n  playerJoinSchema,\n  ProtocolSchemaTypes,\n  sendLeaderboardSchema,\n  sendTypeLogSchema,\n  startRaceAcceptSchema,\n  startRaceRequestSchema,\n  updateTypeLogsSchema,\n} from './protocol-schemas';\nimport { SocketProtocols, SocketProtocolsTypes } from './protocols';\n\n// This map contains schemas for each protocols defined in {@link SocketProtocols}\nexport const protocolToSchemaMap = new Map<\n  SocketProtocolsTypes,\n  ProtocolSchemaTypes\n>([\n  [SocketProtocols.AuthTokenTransfer, authTokenTransferSchema],\n  [SocketProtocols.JoinLobbyRequest, initialClientDataSchema],\n  [SocketProtocols.JoinLobbyAccept, initialServerDataSchema],\n  [SocketProtocols.CreateLobbyRequest, initialClientDataSchema],\n  [SocketProtocols.CreateLobbyAccept, initialServerDataSchema],\n  [SocketProtocols.PlayerJoin, playerJoinSchema],\n  [SocketProtocols.ClearPlayer, clearPlayerSchema],\n  [SocketProtocols.StartRaceRequest, startRaceRequestSchema],\n  [SocketProtocols.StartRaceAccept, startRaceAcceptSchema],\n  [SocketProtocols.SendTypeLog, sendTypeLogSchema],\n  [SocketProtocols.UpdateTypeLogs, updateTypeLogsSchema],\n  [SocketProtocols.InformTimeout, informTimeoutSchema],\n  [SocketProtocols.SendLeaderboard, sendLeaderboardSchema],\n]);\n","/** Socket communication direction */\nenum TransferDirection {\n  FromServer = 'FS',\n  FromServerToAll = 'FS_ALL',\n  ToServer = 'TS',\n}\n\n/** Socket communication type\n * - Initial: All initial communications (e.g. Joining a lobby, Receiving snapshot by the player, Transfer token)\n * - Command: All commands (e.g. Start race, Reset lobby)\n * - Information: All information (e.g. Player joined, Sending leaderboard)\n */\nenum CommunicationType {\n  Initial = 'INT',\n  Command = 'CMD',\n  Information = 'INF',\n}\n\nenum ProtocolName {\n  AuthToken = 'AUTH_TOKEN',\n  JoinLobby = 'JOIN_LOBBY',\n  PlayerJoin = 'PLAYER_JOIN',\n  CreateLobby = 'CREATE_LOBBY',\n  StartRace = 'START_RACE',\n  SendTypeLog = 'SEND_TYPE_LOG',\n  UpdateTypeLogs = 'UPDATE_TYPE_LOGS',\n  Timeout = 'TIMEOUT',\n  // ForceEnd = 'FORCE_END',\n  SendLeaderboard = 'SEND_LEADERBOARD',\n  ClearPlayer = 'CLEAR_PLAYER',\n  ResetLobby = 'RESET_LOBBY',\n}\n\nexport enum SocketProtocols {\n  // Auth\n  AuthTokenTransfer = `${TransferDirection.FromServer}/${CommunicationType.Initial}/${ProtocolName.AuthToken}`,\n\n  // Joining a lobby\n  JoinLobbyRequest = `${TransferDirection.ToServer}/${CommunicationType.Initial}/${ProtocolName.JoinLobby}`,\n  JoinLobbyAccept = `${TransferDirection.FromServer}/${CommunicationType.Initial}/${ProtocolName.JoinLobby}`,\n  PlayerJoin = `${TransferDirection.FromServerToAll}/${CommunicationType.Information}/${ProtocolName.PlayerJoin}`,\n\n  // Creating a lobby\n  CreateLobbyRequest = `${TransferDirection.ToServer}/${CommunicationType.Initial}/${ProtocolName.CreateLobby}`,\n  CreateLobbyAccept = `${TransferDirection.FromServer}/${CommunicationType.Initial}/${ProtocolName.CreateLobby}`,\n\n  // Race start\n  StartRaceRequest = `${TransferDirection.ToServer}/${CommunicationType.Command}/${ProtocolName.StartRace}`,\n  StartRaceAccept = `${TransferDirection.FromServer}/${CommunicationType.Command}/${ProtocolName.StartRace}`,\n\n  // Type logs\n  SendTypeLog = `${TransferDirection.ToServer}/${CommunicationType.Information}/${ProtocolName.SendTypeLog}`,\n  UpdateTypeLogs = `${TransferDirection.FromServerToAll}/${CommunicationType.Information}/${ProtocolName.UpdateTypeLogs}`,\n\n  // End race\n  InformTimeout = `${TransferDirection.ToServer}/${CommunicationType.Information}/${ProtocolName.Timeout}`,\n  SendLeaderboard = `${TransferDirection.FromServerToAll}/${CommunicationType.Information}/${ProtocolName.SendLeaderboard}`,\n\n  // Clear a player\n  ClearPlayer = `${TransferDirection.FromServerToAll}/${CommunicationType.Command}/${ProtocolName.ClearPlayer}`,\n\n  // Reset lobby\n  ResetLobby = `${TransferDirection.FromServerToAll}/${CommunicationType.Command}/${ProtocolName.ResetLobby}`,\n}\n\nexport type SocketProtocolsTypes =\n  (typeof SocketProtocols)[keyof typeof SocketProtocols];\n","import {\n  ClearPlayerData,\n  InformTimeoutData,\n  InitialClientData,\n  InitialServerData,\n  PlayerJoinData,\n  SendLeaderboardData,\n  SendTypeLogData,\n  StartRaceAcceptData,\n  StartRaceRequestData,\n  UpdateTypeLogsData,\n} from './protocol-data';\nimport { SocketProtocols } from './protocols';\n\n// Using this for validate types in pubsub of socket events\nexport interface InitialProtocolToTypeMap extends Record<string, object> {\n  [SocketProtocols.JoinLobbyRequest]: InitialClientData;\n  [SocketProtocols.JoinLobbyAccept]: InitialServerData;\n  [SocketProtocols.CreateLobbyRequest]: InitialClientData;\n  [SocketProtocols.CreateLobbyAccept]: InitialServerData;\n}\n\nexport interface OtherProtocolToTypeMap extends Record<string, object> {\n  [SocketProtocols.PlayerJoin]: PlayerJoinData;\n  [SocketProtocols.ClearPlayer]: ClearPlayerData;\n  [SocketProtocols.StartRaceRequest]: StartRaceRequestData;\n  [SocketProtocols.StartRaceAccept]: StartRaceAcceptData;\n  [SocketProtocols.SendTypeLog]: SendTypeLogData;\n  [SocketProtocols.UpdateTypeLogs]: UpdateTypeLogsData;\n  [SocketProtocols.InformTimeout]: InformTimeoutData;\n  [SocketProtocols.SendLeaderboard]: SendLeaderboardData;\n}\n\nexport type AllProtocolToTypeMap = InitialProtocolToTypeMap &\n  OtherProtocolToTypeMap;\n","export * from './leaderboard';\nexport * from './log-message';\nexport * from './player';\nexport * from './race';\nexport * from './state-model';\nexport * from './tournament';\nexport * from './uid';\n","import { AppPlayerId } from './player';\nimport { AppRaceId } from './race';\n\n/** Player status after a race. */\nexport enum AppPlayerStatus {\n  Complete = 'complete',\n  Timeout = 'timeout',\n}\n\n/** Leaderboard entry values of the completed player. */\nexport interface AppFinishedPlayerValues {\n  wpm: number;\n  elapsedTime: number;\n}\n\n/** Leaderboard entry values of the incompleted (who end the race by timeout) player. */\nexport interface AppTimeoutPlayerValues {\n  distance: number;\n}\n\n/** Leaderboard entry of a player. */\nexport interface AppLeaderboardEntry {\n  playerId: AppPlayerId;\n  status: AppPlayerStatus;\n  values: AppFinishedPlayerValues | AppTimeoutPlayerValues;\n}\n\n/** Leaderboard entry of a completed player */\nexport interface AppFinishedLeaderboardEntry extends AppLeaderboardEntry {\n  values: AppFinishedPlayerValues;\n}\n\n/** Leaderboard entry of a incompleted player */\nexport interface AppTimeoutLeaderboardEntry extends AppLeaderboardEntry {\n  values: AppTimeoutPlayerValues;\n}\n\n/** A leaderboard (a collection of entries) */\nexport type AppLeaderboard = AppLeaderboardEntry[];\n\n/** Leaderboards model (a collection of leaderboards) */\nexport type AppLeaderboards = Record<AppRaceId, AppLeaderboard>;\n","/** Error codes */\nexport enum AppErrorCode {\n  TournamentNotExists = 'TOURNAMNET_NOT_FOUND',\n  PlayerNotExists = 'PLAYER_NOT_FOUND',\n  InvalidPlayerName = 'INVALID_PLAYER_NAME',\n  RaceNotExists = 'RACE_NOT_FOUND',\n  PayloadNotProvided = 'PAYLOAD_NOT_PROVIDED',\n}\n\n/** Types of log messages. */\nexport enum AppMessageLogType {\n  Error = 'error',\n  Info = 'info',\n  Warn = 'warn',\n}\n\n/** Unix timestamp of the error log + random id */\nexport type AppErrorTimestamp = string;\n\n/** Log message with info */\nexport interface AppMessageLog {\n  message: string;\n  code: AppErrorCode;\n  related: string;\n  type: AppMessageLogType;\n}\n\n/** Error logs */\nexport interface AppErrorLog {\n  message: string;\n  code: AppErrorCode;\n  related: string;\n}\n\n/** Error logs model */\nexport type AppErrorLogs = Record<AppErrorTimestamp, AppErrorLog>;\n","import { AppRaceId } from './race';\nimport { AppTournamentId } from './tournament';\n\nexport enum AppPlayerState {\n  Idle = 'idle',\n  Racing = 'racing',\n}\n\n/** Unix timestamp from the client side to keep logs. */\nexport type AppTimestamp = number;\n\n/** Correctly typed text length for each player. */\nexport type AppTextLength = number;\n\n/** Player id\n *\n * Sample Id - `P:oNgXdluf`\n */\nexport type AppPlayerId = `P:${string}`;\n\n/** Player details */\nexport interface AppPlayer {\n  name: string;\n  avatarLink: string;\n  state: AppPlayerState;\n  tournamentId: AppTournamentId;\n}\n\n/** Player models */\nexport type AppPlayers = Record<AppPlayerId, AppPlayer>;\n\n/** Player log id\n *\n * Sample Id - `T:sktm2JVn-R:050-P:oNgXdluf`\n */\nexport type AppPlayerLogId = `${AppRaceId}-${AppPlayerId}`;\n\n/** Player log details */\nexport interface AppPlayerLog {\n  timestamp: AppTimestamp;\n  textLength: AppTextLength;\n}\n\n/** Player logs model */\nexport type AppPlayerLogs = Record<AppPlayerLogId, AppPlayerLog[]>;\n\n/** Race text cursor position */\nexport interface AppRacePlayerCursor {\n  playerId: AppPlayerId;\n  position: number;\n  avatarLink: string;\n}\n","import { AppPlayer, AppPlayerId } from './player';\nimport { AppTournamentId } from './tournament';\n\n/** Player profile */\nexport type AppPlayerProfile = Pick<AppPlayer, 'name' | 'avatarLink'>;\n\n/** Player profile collection to keep in the race */\nexport type AppPlayerProfiles = Record<AppPlayerId, AppPlayerProfile>;\n\n/** Race id\n *\n * Sample Id - `T:sktm2JVn-R:050`\n */\nexport type AppRaceId = `${AppTournamentId}-R:${string}`;\n\n/** Race details */\nexport interface AppRace {\n  text: string;\n  timeoutDuration: number;\n  startedTimestamp: number;\n  players: AppPlayerProfiles;\n  isOnGoing: boolean;\n  raceStartedBy: AppPlayerId;\n}\n\n/** Races model */\nexport type AppRaces = Record<AppRaceId, AppRace>;\n","import { AppLeaderboards } from './leaderboard';\nimport { AppErrorLogs } from './log-message';\nimport { AppPlayerLogs, AppPlayers } from './player';\nimport { AppRaces } from './race';\nimport { AppTournaments } from './tournament';\n\n/** State model interface\n *\n * Collection of all the models.\n */\nexport interface AppStateModel {\n  tournamentsModel: AppTournaments;\n  playersModel: AppPlayers;\n  racesModel: AppRaces;\n  leaderboardsModel: AppLeaderboards;\n  playerLogsModel: AppPlayerLogs;\n  errorLogsModel: AppErrorLogs;\n}\n\nexport type AppSnapshot = Omit<AppStateModel, 'errorLogsModel'>;\n","import { AppPlayerId } from './player';\nimport { AppRaceId } from './race';\n\n/** Tournament state */\nexport enum AppTournamentState {\n  Lobby = 'lobby',\n  Ready = 'ready',\n  Race = 'race',\n  Leaderboard = 'leaderboard',\n  Empty = 'empty',\n}\n\n/** Tournament id\n *\n * Sample Id - `T:sktm2JVn`\n */\nexport type AppTournamentId = `T:${string}`;\n\n/** Tournament details */\nexport interface AppTournament {\n  state: AppTournamentState;\n  raceIds: Array<AppRaceId>;\n  playerIds: Array<AppPlayerId>;\n}\n\n/** Tournaments model */\nexport type AppTournaments = Record<AppTournamentId, AppTournament>;\n","/** Id number type */\nexport enum AppIdNumberType {\n  Player = 'player',\n  Tournament = 'tournament',\n  General = 'general',\n}\n","export * from './lib/compute-race-duration';\nexport * from './lib/extract-ids';\nexport * from './lib/generate-avatar-link';\nexport * from './lib/generate-leaderboard';\nexport * from './lib/generate-uid';\nexport * from './lib/give-zero-padding';\nexport * from './lib/pubsub';\nexport * from './lib/room-tournament-id-converter';\n","import { AVERAGE_WPM } from '@razor/constants';\n\n/** Compute the time it would take for an average person to type given race text.\n *\n * @param text - Race text.\n * @returns Maximum allowed duration in seconds.\n */\nexport const computeRaceDuration = (text: string): number => {\n  /** Average word count\n   *\n   * Assuming that the average word has 5 letters (and with the space 6 characters).\n   */\n  const wordCount = text.length / 6;\n  const averageTime = Math.ceil((wordCount / AVERAGE_WPM) * 60);\n  const maximumAllowedTime = Math.ceil(averageTime * 1.35);\n\n  return maximumAllowedTime;\n};\n","import {\n  AppPlayerId,\n  AppPlayerLogId,\n  AppRaceId,\n  AppTournamentId,\n} from '@razor/models';\n\nexport enum ExtractIdType {\n  Tournament = 'tournament',\n  Player = 'player',\n  Race = 'race',\n  PlayerLog = 'playerLog',\n}\n\ntype IdType = AppTournamentId | AppPlayerId | AppRaceId | AppPlayerLogId;\n\ntype TypeMap = {\n  tournament: AppTournamentId;\n  player: AppPlayerId;\n  race: AppRaceId;\n  playerLog: AppPlayerLogId;\n};\n\n/** Extract an id from a compound id\n *\n * @param inputId - Compound id to extract from.\n * @param inputIdType - Type of id to input id.\n * @param outputIdType - Type of id to extract.\n * @returns - Extracted id.\n */\nexport const extractId = <T extends ExtractIdType>(\n  inputId: IdType,\n  inputIdType: ExtractIdType,\n  outputIdType: T,\n): TypeMap[T] => {\n  if (inputIdType === outputIdType) {\n    return inputId as TypeMap[T];\n  }\n\n  // Check the validity of the input id.\n  const validInput = checkValidityOfId(inputIdType, inputId);\n  if (!validInput) {\n    throw new Error('Invalid input value');\n  }\n  const splittedId = inputId.split('-');\n\n  switch (outputIdType) {\n    case ExtractIdType.Tournament:\n      // Extract the first part of the id if the input id type is \"race\" or \"playerLog\".\n      if (inputIdType === ExtractIdType.Race) {\n        return splittedId[0] as TypeMap[T];\n      } else if (inputIdType === ExtractIdType.PlayerLog) {\n        return splittedId[0] as TypeMap[T];\n      } else {\n        throw new Error('Invalid type');\n      }\n    case ExtractIdType.Player:\n      // Extract the second part of the id if the input id type is \"playerLog\".\n      if (inputIdType === ExtractIdType.PlayerLog) {\n        return splittedId[2] as TypeMap[T];\n      } else {\n        throw new Error('Invalid type');\n      }\n    case ExtractIdType.Race:\n      // Extract the first two parts of the id if the input id type is \"playerLog\".\n      if (inputIdType === ExtractIdType.PlayerLog) {\n        return `${splittedId[0]}-${splittedId[1]}` as TypeMap[T];\n      } else {\n        throw new Error('Invalid type');\n      }\n    default:\n      throw new Error('Invalid type');\n  }\n};\n\n/** Checking validity of an id\n *\n * @param type - Type of id to check.\n * @param id - Id to check.\n */\nexport const checkValidityOfId = (\n  type: ExtractIdType,\n  id: IdType,\n): RegExpMatchArray | null => {\n  switch (type) {\n    case ExtractIdType.Tournament:\n      return id.match(/^T:[a-zA-Z0-9]{8}$/);\n    case ExtractIdType.Player:\n      return id.match(/^P:[a-zA-Z0-9]{8}$/);\n    case ExtractIdType.Race:\n      return id.match(/^T:[a-zA-Z0-9]{8}-R:[a-zA-Z0-9]{3}$/);\n    case ExtractIdType.PlayerLog:\n      return id.match(/^T:[a-zA-Z0-9]{8}-R:[a-zA-Z0-9]{3}-P:[a-zA-Z0-9]{8}$/);\n  }\n};\n","export const generateAvatarLink = (playerName: string): string => {\n  /** Convert player name text to hex value to use as a seed. */\n  const seed = bytesToHex(stringToUTF8Bytes(playerName));\n\n  const image = `https://api.dicebear.com/7.x/open-peeps/svg?seed=${seed}&scale=80`;\n  return image;\n};\n\nconst bytesToHex = (bytes: Uint8Array): string => {\n  return Array.from(bytes, byte => byte.toString(16).padStart(2, '0')).join('');\n};\n\nconst stringToUTF8Bytes = (text: string): Uint8Array => {\n  return new TextEncoder().encode(text);\n};\n","import {\n  AppFinishedLeaderboardEntry,\n  AppFinishedPlayerValues,\n  AppLeaderboard,\n  AppPlayerLog,\n  AppPlayerLogId,\n  AppPlayerLogs,\n  AppPlayerStatus,\n  AppRaceId,\n  AppTimeoutLeaderboardEntry,\n  AppTimeoutPlayerValues,\n} from '@razor/models';\n\nimport { extractId, ExtractIdType } from './extract-ids';\n\n/** Generate leaderboard for given player logs.\n *\n * @param playerLogs - Player logs to generate leaderboard from.\n * @param raceId - Race id to generate leaderboard for.\n * @param raceTextLength - Length of text for the race.\n * @returns Generated leaderboard.\n */\nexport const generateLeaderboard = (\n  playerLogs: AppPlayerLogs,\n  raceId: AppRaceId,\n  raceTextLength: number,\n): AppLeaderboard => {\n  /** Entries for completed players of race. */\n  const completeEntries: AppFinishedLeaderboardEntry[] = [];\n  /** Entries for incomplete players of race. */\n  const timeoutEntries: AppTimeoutLeaderboardEntry[] = [];\n\n  let playerLogId: AppPlayerLogId;\n  for (playerLogId in playerLogs) {\n    const raceIdOfPlayerLog = extractId(\n      playerLogId,\n      ExtractIdType.PlayerLog,\n      ExtractIdType.Race,\n    );\n    const playerIdOfPlayerLog = extractId(\n      playerLogId,\n      ExtractIdType.PlayerLog,\n      ExtractIdType.Player,\n    );\n\n    // Check whether the race owns the race log.\n    if (raceIdOfPlayerLog === raceId) {\n      const playerLogsLength = playerLogs[playerLogId].length;\n      const playerLastTextLength =\n        playerLogs[playerLogId][playerLogsLength - 1].textLength;\n\n      // Check whether the player has finished the race by comparing the last logged text length of the player and the race text length.\n      if (playerLastTextLength === raceTextLength) {\n        const wpm = calculateWPM(raceTextLength, playerLogs[playerLogId]);\n        // Elapsed time = (Last timestamp - First timestamp) / 1000 <= In seconds\n        const elapsedTime =\n          (playerLogs[playerLogId][playerLogsLength - 1].timestamp -\n            playerLogs[playerLogId][0].timestamp) /\n          1000;\n        const finishedPlayerValues: AppFinishedPlayerValues = {\n          wpm,\n          elapsedTime,\n        };\n\n        completeEntries.push({\n          playerId: playerIdOfPlayerLog,\n          status: AppPlayerStatus.Complete,\n          values: finishedPlayerValues,\n        });\n      } else {\n        // Total length(distance) typed by the player = Last text length - First text length\n        const distance =\n          playerLogs[playerLogId][playerLogsLength - 1].textLength -\n          playerLogs[playerLogId][0].textLength;\n\n        const timeoutPlayerValues: AppTimeoutPlayerValues = {\n          distance,\n        };\n\n        timeoutEntries.push({\n          playerId: playerIdOfPlayerLog,\n          status: AppPlayerStatus.Timeout,\n          values: timeoutPlayerValues,\n        });\n      }\n    }\n  }\n\n  // Sort the entries of the completed players by wpm.\n  completeEntries.sort((a, b) => b.values.wpm - a.values.wpm);\n  // Sort the entries of the incomplete players by distance.\n  timeoutEntries.sort((a, b) => b.values.distance - a.values.distance);\n\n  // Merge the entries of the completed and incomplete players.\n  const leaderboardEntries: AppLeaderboard = [\n    ...completeEntries,\n    ...timeoutEntries,\n  ];\n  return leaderboardEntries;\n};\n\n/** Calculate average wpm.\n *\n * WPM is only calculated for the race-completed players.\n * Term Quaater is considered between two markers of race text length.\n *\n * @param length - Length of the text.\n * @param logs - Logs of a player.\n * @returns Average wpm.\n */\nconst calculateWPM = (length: number, logs: AppPlayerLog[]): number => {\n  /** Placing markers(checkpoints) for race text length. This will partition race text length. */\n  const mark1 = Math.floor(length * 0.25);\n  const mark2 = Math.floor(length * 0.5);\n  const mark3 = Math.floor(length * 0.75);\n\n  /** Markers(checkpoints) for the timestamps of the player\n   * [0] - Started timestamp\n   * [1] - Second timestamp marker (0 by default)\n   * [2] - Third timestamp marker (0 by default)\n   * [3] - Fourth timestamp marker (0 by default)\n   * [4] - Finished timestamp\n   */\n  const timestampCheckpoints = [\n    logs[0].timestamp,\n    0,\n    0,\n    0,\n    logs[logs.length - 1].timestamp,\n  ];\n\n  /** Markers(checkpoints) for the player-typed text length\n   * [0] - Started text length (Player starts at 0)\n   * [1] - Second text length marker (0 by default)\n   * [2] - Third text length marker (0 by default)\n   * [3] - Fourth text length marker (0 by default)\n   * [4] - Finished text length\n   */\n  const textLengthCheckpoints = [0, 0, 0, 0, length];\n\n  //\n  //  * Example values after the loop:\n  //  timestampCheckpoints = [ 1234567000, 1234567021, 1234567050, 1234567076, 1234567102 ]\n  //  textLengthCheckpoints = [ 0, 119, 241, 372, 500 ]\n  //\n  //  * Example 2:\n  //  timestampCheckpoints = [ 1234567000, 1234567029, 1234567055, 1234567087, 1234567120 ]\n  //  textLengthCheckpoints = [ 0, 120, 245, 375, 500 ]\n  //\n  for (let index = 0; index < logs.length; index++) {\n    // Assigning player timestamp markers(checkpoints) & player text length markers(checkpoints)\n    // These condition keeps updating checkpoint until the player logs reach the that marker.\n    if (logs[index].textLength <= mark1) {\n      timestampCheckpoints[1] = logs[index].timestamp;\n      textLengthCheckpoints[1] = logs[index].textLength;\n    }\n    if (logs[index].textLength <= mark2) {\n      timestampCheckpoints[2] = logs[index].timestamp;\n      textLengthCheckpoints[2] = logs[index].textLength;\n    }\n    if (logs[index].textLength <= mark3) {\n      timestampCheckpoints[3] = logs[index].timestamp;\n      textLengthCheckpoints[3] = logs[index].textLength;\n    }\n  }\n  let averageWPM = 0;\n\n  /** Calculated WPMs for each quarter of the player */\n  const quarterWPMs = [0, 0, 0, 0];\n  for (let index = 0; index < timestampCheckpoints.length - 1; index++) {\n    // Calculate the quarter WPM using the difference between the two timestamp checkpoints and the two text length checkpoints.\n    // * From example 1:\n    // calculateQuarterWPM(1234567021, 1234567050, 119, 241) = 2.4\n    quarterWPMs[index] = calculateQuarterWPM(\n      timestampCheckpoints[index],\n      timestampCheckpoints[index + 1],\n      textLengthCheckpoints[index],\n      textLengthCheckpoints[index + 1],\n    );\n    averageWPM += quarterWPMs[index] / 4;\n  }\n\n  return +averageWPM.toFixed(2);\n};\n\n/** Calculate WPM for a quarter\n *\n * @returns WPM for specific quarter.\n */\nconst calculateQuarterWPM = (\n  startTimestamp: number,\n  endTimestamp: number,\n  startTextLength: number,\n  endTextLength: number,\n): number => {\n  const timeElapsed = endTimestamp - startTimestamp;\n  const textLength = endTextLength - startTextLength;\n\n  // Avg. number of words in race text = textLength / 5 + 1 <= (Assuming that the average word has 5 letters (and with the space 6 characters))\n  // WPM = Avg. words / Mintues\n  const wpm = textLength / 6 / (timeElapsed / 1000 / 60);\n  return wpm;\n};\n","import {\n  GENERAL_ID_LENGTH,\n  NANOID_ALPHABET,\n  PLAYER_ID_LENGTH,\n  TOURNAMENT_ID_LENGTH,\n} from '@razor/constants';\nimport { AppIdNumberType, AppPlayerId, AppTournamentId } from '@razor/models';\nimport { customAlphabet } from 'nanoid';\n\n/** Nanoid with custom alphabet */\nconst nanoid = customAlphabet(NANOID_ALPHABET, GENERAL_ID_LENGTH);\n\ntype TypeMap = {\n  tournament: AppTournamentId;\n  player: AppPlayerId;\n  general: string;\n};\n\n/** Generate an unique id for given id type.\n *\n * @param type - Type of id to generate.\n * @returns - Generated id.\n */\nexport const generateUid = <T extends AppIdNumberType>(type: T): TypeMap[T] => {\n  switch (type) {\n    case AppIdNumberType.Tournament:\n      return `T:${nanoid(TOURNAMENT_ID_LENGTH)}` as TypeMap[T];\n    case AppIdNumberType.Player:\n      return `P:${nanoid(PLAYER_ID_LENGTH)}` as TypeMap[T];\n    default:\n      return nanoid(GENERAL_ID_LENGTH) as TypeMap[T];\n  }\n};\n","module.exports = require(\"nanoid\");","/** Give zero padding according to the size given.\n * (eg: if size is 3, 1 -> 001, 12 -> 012, 123 -> 123)\n *\n * @param num - Number to be padded.\n * @param size - Size of the padding.\n * @returns Padded number.\n */\nexport const giveZeroPadding = (num: string, size: number): string => {\n  return `${num}`.padStart(size, '0');\n};\n","type FuncType<T extends object> = (data: T) => void | Promise<void>;\ninterface Events {\n  [key: string]: FuncType<object>[];\n}\n\nexport class PubSub<EventMap extends Record<string, object>> {\n  private events: Events = {};\n\n  subscribe<Event extends string>(\n    eventName: Event,\n    fn: FuncType<EventMap[Event]>,\n  ): void {\n    this.events[eventName] = this.events[eventName] || [];\n    this.events[eventName].push(fn as FuncType<object>);\n    console.log(`Subscribed to ${eventName}`);\n  }\n\n  unsubscribe<Event extends string>(\n    eventName: Event,\n    fn: FuncType<EventMap[Event]>,\n  ): void {\n    if (this.events[eventName]) {\n      this.events[eventName] = this.events[eventName].filter(\n        eventFn => fn !== eventFn,\n      );\n      console.log(`Unsubscribed from ${eventName}`);\n    }\n  }\n\n  publish<Event extends string>(eventName: Event, data: EventMap[Event]): void {\n    if (this.events[eventName]) {\n      this.events[eventName].forEach(fn => {\n        fn(data);\n      });\n      console.log(`Published to ${eventName}`);\n    }\n  }\n}\n","import { RoomId, TournamentId } from '@razor/models';\n\nexport const tournamentIdToRoomId = (tournamentId: TournamentId): RoomId => {\n  return tournamentId.slice(2);\n};\n\nexport const roomIdToTournamentId = (roomId: RoomId): TournamentId => {\n  return `T:${roomId}`;\n};\n","// ### [Effects] Player operations ### //\n\nimport {\n  AppIdNumberType,\n  AppPlayerId,\n  AppPlayerLogId,\n  AppPlayerState,\n  AppTournamentState,\n  PlayerId,\n} from '@razor/models';\nimport { generateAvatarLink, generateUid } from '@razor/util';\n\nimport {\n  AddPlayerPayload,\n  ClearPlayerPayload,\n  JoinPlayerPayload,\n  SendTypeLogPayload,\n} from '../payloads';\nimport {\n  invalidPlayerName,\n  invalidPlayerNameLength,\n  payloadNotProvided,\n  playerNotFound,\n  raceNotFound,\n  tournamentNotFound,\n} from '../raisers';\nimport { Dispatch, RootState } from '../store';\n\n/** Effect function for joining player.\n * Run the validation for the received payload.\n * If an id is provided, then the player will be joined to the tournament.\n * If an id is not provided, then the new tournament will be generated and the player will be joined to the new tournament.\n *\n * @param dispatch - Dispatch function from the store.\n * @param payload - Payload for joining player.\n * @param state - Current state model.\n *\n * ### Related reducers and effects\n * - setTournamentState (effect)\n * - addTournamentReducer\n * - addPlayerReducer\n *\n * ### Related raisers\n * - payloadNotProvided\n * - invalidPlayerName\n * - invalidPlayerNameLength\n * - tournamentNotFound\n */\nexport const joinPlayer = (\n  dispatch: Dispatch,\n  payload: JoinPlayerPayload,\n  state: RootState,\n): PlayerId | null => {\n  const { receivedTournamentId, playerName } = payload;\n  // Tournament id with correct format.\n  let tournamentId;\n\n  // If the player name is not provided, call the raiser.\n  if (!playerName) {\n    payloadNotProvided(joinPlayer.name, dispatch, 'playerName');\n    return null;\n  }\n  // If the player name has an invalid length, call the raiser.\n  if (playerName.length < 2 || playerName.length > 16) {\n    invalidPlayerNameLength(dispatch);\n    return null;\n  }\n  // If the player name has invalid characters, call the raiser.\n  if (!playerName.match(/^[a-zA-Z0-9]+$/)) {\n    invalidPlayerName(dispatch);\n    return null;\n  }\n\n  // If the tournament id is provided,\n  if (receivedTournamentId) {\n    // If the tournament is not found, call the raiser.\n    if (!state.game.tournamentsModel[receivedTournamentId]) {\n      tournamentNotFound(dispatch, receivedTournamentId);\n      return null;\n    }\n    // If the tournament is found, set the tournament id.\n    tournamentId = receivedTournamentId;\n\n    // Converting tournament state to \"Lobby\" from \"Empty\" if it had no players.\n    if (\n      state.game.tournamentsModel[receivedTournamentId].playerIds.length == 0\n    ) {\n      dispatch.game.setTournamentState({\n        tournamentId,\n        tournamentState: AppTournamentState.Lobby,\n      });\n    }\n\n    // Converting tournament state to \"Ready\" from \"Lobby\" if it has 2 or more players.\n    if (\n      state.game.tournamentsModel[receivedTournamentId].playerIds.length >= 1\n    ) {\n      const tournamentState =\n        state.game.tournamentsModel[receivedTournamentId].state;\n      // Change to Ready only if the tournament is in Lobby state\n      // (Don't change state if current state is Race or Leaderboard)\n      if (tournamentState === AppTournamentState.Lobby) {\n        dispatch.game.setTournamentState({\n          tournamentId,\n          tournamentState: AppTournamentState.Ready,\n        });\n      }\n    }\n  } else {\n    // If the tournament id is not provided, generate a new tournament id.\n    tournamentId = generateUid(AppIdNumberType.Tournament);\n\n    // If the tournament id was not provided, then add a new tournament.\n    dispatch.game.addTournamentReducer({\n      tournamentId,\n      tournament: {\n        state: AppTournamentState.Lobby,\n        raceIds: [],\n        playerIds: [],\n      },\n    });\n  }\n\n  // Generate a new player id.\n  const playerId: AppPlayerId = generateUid(AppIdNumberType.Player);\n\n  // Add the new player.\n  dispatch.game.addPlayerReducer({\n    tournamentId,\n    playerId: playerId,\n    player: {\n      name: playerName,\n      avatarLink: generateAvatarLink(playerName),\n      state: AppPlayerState.Idle,\n      tournamentId,\n    },\n  });\n\n  return playerId;\n};\n\n/** Effect function for adding player.\n * Run the validation for the received payload.\n * Player will be added to the tournament.\n * Tournament state will update with the given state.\n *\n * @param dispatch - Dispatch function from the store.\n * @param payload - Payload for adding player.\n * @param state - Current state model.\n *\n * ### Related reducers and effects\n * - setTournamentState (effect)\n * - addPlayerReducer\n *\n * ### Related raisers\n * - payloadNotProvided\n * - invalidPlayerName\n * - invalidPlayerNameLength\n * - tournamentNotFound\n */\nexport const addPlayer = (\n  dispatch: Dispatch,\n  payload: AddPlayerPayload,\n  state: RootState,\n): void => {\n  const { playerId, player } = payload;\n  const {\n    name: playerName,\n    avatarLink,\n    state: playerState,\n    tournamentId,\n  } = player;\n\n  // Validate the payload.\n  if (!playerName) {\n    payloadNotProvided(addPlayer.name, dispatch, 'playerName');\n    return;\n  }\n  if (!tournamentId) {\n    payloadNotProvided(addPlayer.name, dispatch, 'tournamentId');\n    return;\n  }\n  if (playerName.length < 2 || playerName.length > 16) {\n    invalidPlayerNameLength(dispatch);\n    return;\n  }\n  if (!playerName.match(/^[a-zA-Z0-9]+$/)) {\n    invalidPlayerName(dispatch);\n    return;\n  }\n  // If the tournament is not found, call the raiser.\n  if (!state.game.tournamentsModel[tournamentId]) {\n    tournamentNotFound(dispatch, tournamentId);\n    return;\n  }\n\n  // When adding a player lobby cannot be Empty\n  // Converting tournament state to \"Ready\" only if state was \"Lobby\".\n  const tournamentState = state.game.tournamentsModel[tournamentId].state;\n  if (\n    state.game.tournamentsModel[tournamentId].playerIds.length >= 1 &&\n    tournamentState === AppTournamentState.Lobby\n  ) {\n    dispatch.game.setTournamentState({\n      tournamentId,\n      tournamentState: AppTournamentState.Ready,\n    });\n  }\n\n  // Add the new player.\n  dispatch.game.addPlayerReducer({\n    tournamentId,\n    playerId: playerId,\n    player: {\n      name: playerName,\n      avatarLink: avatarLink,\n      state: playerState,\n      tournamentId,\n    },\n  });\n};\n\n/** Effect function for clearing player.\n * Run the validation for the received payload.\n * If the player is found, then the player will be cleared.\n *\n * @param dispatch - Dispatch function from the store.\n * @param payload - Payload for clearing player.\n * @param state - Current state model.\n *\n * ### Related reducers and effects\n * - setTournamentState (effect)\n * - removePlayerReducer\n *\n * ### Related raisers\n * - payloadNotProvided\n * - playerNotFound\n */\nexport const clearPlayer = (\n  dispatch: Dispatch,\n  payload: ClearPlayerPayload,\n  state: RootState,\n): void => {\n  const { playerId } = payload;\n\n  // If the player id is not provided, call the raiser.\n  if (!playerId) {\n    payloadNotProvided(clearPlayer.name, dispatch, 'playerId');\n    return;\n  }\n  // If the player is not found, call the raiser.\n  if (!(playerId in state.game.playersModel)) {\n    playerNotFound(dispatch, playerId);\n    return;\n  }\n\n  // Tournament id of the player.\n  const tournamentId = state.game.playersModel[playerId].tournamentId;\n\n  // Remove the player.\n  dispatch.game.removePlayerReducer({\n    tournamentId,\n    playerId,\n  });\n\n  // If player was the last member of the tournament, change the tournament state to empty\n  const playerIdsInTournament =\n    state.game.tournamentsModel[tournamentId].playerIds;\n  if (playerIdsInTournament.length === 1) {\n    if (playerIdsInTournament[0] === playerId) {\n      dispatch.game.setTournamentState({\n        tournamentId,\n        tournamentState: AppTournamentState.Empty,\n      });\n    }\n  }\n};\n\n/** Effect function for sending player logs while racing.\n * Run the validation for the received payload.\n * If the player and race are found, then the player logs will be sent.\n *\n * @param dispatch - Dispatch function from the store.\n * @param payload - Payload for sending player logs.\n * @param state - Current state model.\n *\n * ### Related reducers and effects\n * - updatePlayerLogReducer\n *\n * ### Related raisers\n * - payloadNotProvided\n * - playerNotFound\n * - raceNotFound\n */\nexport const sendTypeLog = (\n  dispatch: Dispatch,\n  payload: SendTypeLogPayload,\n  state: RootState,\n): void => {\n  const { raceId, playerId, playerLog } = payload;\n\n  // If the race id is not provided, call the raiser.\n  if (!raceId) {\n    payloadNotProvided(sendTypeLog.name, dispatch, 'raceId');\n    return;\n  }\n  // If the player id is not provided, call the raiser.\n  if (!playerId) {\n    payloadNotProvided(sendTypeLog.name, dispatch, 'playerId');\n    return;\n  }\n\n  // If the player is not found, call the raiser.\n  if (!(playerId in state.game.playersModel)) {\n    playerNotFound(dispatch, playerId);\n    return;\n  }\n  // If the race is not found, call the raiser.\n  if (!(raceId in state.game.racesModel)) {\n    raceNotFound(dispatch, raceId);\n    return;\n  }\n\n  // Player log id.\n  const playerLogId: AppPlayerLogId = `${raceId}-${playerId}`;\n\n  // Update the player log.\n  dispatch.game.updatePlayerLogReducer({\n    playerLogId,\n    playerLog,\n  });\n};\n","// Exporting raisers\n// Raisers are customized functions to raise logs through sendLogMessage effect.\n// Rasoers are used only in effects functions because effects are used by apps such as client and server.\n\nexport * from './payload';\nexport * from './player';\nexport * from './race';\nexport * from './tournament';\n","import { AppErrorCode, AppMessageLogType } from '@razor/models';\n\nimport { Dispatch } from '../store';\n\n/** Logger raiser for payload not provided for a function.\n *\n * @param funcName - Name of the function which is raising the error.\n * @param dispatch - Dispatch function of the store.\n * @param payloadName - Missing payload item.\n */\nexport const payloadNotProvided = (\n  funcName: string,\n  dispatch: Dispatch,\n  payloadName: string,\n): void => {\n  dispatch.game.sendLogMessage({\n    message: `[${funcName}] ${payloadName} is not provided.`,\n    code: AppErrorCode.PayloadNotProvided,\n    related: '',\n    type: AppMessageLogType.Error,\n  });\n};\n","import { AppErrorCode, AppMessageLogType } from '@razor/models';\n\nimport { Dispatch } from '../store';\n\n/** Logger raiser if a player cannot be found in players model.\n *\n * @param dispatch - Dispatch function of the store.\n * @param playerId - Id of the player who is not found.\n * @param additionalMessage - Additional message to be logged.\n */\nexport const playerNotFound = (\n  dispatch: Dispatch,\n  playerId: string,\n  additionalMessage?: string,\n): void => {\n  dispatch.game.sendLogMessage({\n    message: `Player with id ${playerId} does not exist.`,\n    code: AppErrorCode.PlayerNotExists,\n    related: additionalMessage || '',\n    type: AppMessageLogType.Error,\n  });\n};\n\n/** Logger raiser if a player name is invalid.\n *\n * @param dispatch - Dispatch function of the store.\n */\nexport const invalidPlayerName = (dispatch: Dispatch): void => {\n  dispatch.game.sendLogMessage({\n    message: 'Player name is invalid.',\n    code: AppErrorCode.InvalidPlayerName,\n    related: '',\n    type: AppMessageLogType.Error,\n  });\n};\n\n/** Logger raiser if a player name length is invalid.\n *\n * @param dispatch - Dispatch function of the store.\n */\nexport const invalidPlayerNameLength = (dispatch: Dispatch): void => {\n  dispatch.game.sendLogMessage({\n    message: `Player name is too long or too short`,\n    code: AppErrorCode.InvalidPlayerName,\n    related: '',\n    type: AppMessageLogType.Error,\n  });\n};\n","import { AppErrorCode, AppMessageLogType } from '@razor/models';\n\nimport { Dispatch } from '../store';\n\n/** Logger raiser if a race cannot be found in races model.\n *\n * @param dispatch - Dispatch function of the store.\n * @param raceId - Id of the race which is not found.\n * @param additionalMessage - Additional message to be logged.\n */\nexport const raceNotFound = (\n  dispatch: Dispatch,\n  raceId: string,\n  additionalMessage?: string,\n): void => {\n  dispatch.game.sendLogMessage({\n    message: `Race with id ${raceId} does not exist.`,\n    code: AppErrorCode.RaceNotExists,\n    related: additionalMessage || '',\n    type: AppMessageLogType.Error,\n  });\n};\n","import { AppErrorCode, AppMessageLogType } from '@razor/models';\n\nimport { Dispatch } from '../store';\n\n/** Logger raiser if a tournament cannot be found in the tournaments model.\n *\n * @param dispatch - Dispatch function of the store.\n * @param tid - Id of the tournament which is not found.\n * @param additionalMessage - Additional message to be logged.\n */\nexport const tournamentNotFound = (\n  dispatch: Dispatch,\n  tid: string,\n  additionalMessage?: string,\n): void => {\n  dispatch.game.sendLogMessage({\n    message: `Tournament with id ${tid} does not exist.`,\n    code: AppErrorCode.TournamentNotExists,\n    related: additionalMessage || '',\n    type: AppMessageLogType.Error,\n  });\n};\n","// ### [Effects] Race operations ### //\n\nimport { RACE_ID_LENGTH } from '@razor/constants';\nimport {\n  AppPlayer,\n  AppPlayerProfiles,\n  AppPlayerState,\n  AppRace,\n  AppRaceId,\n  AppTournamentId,\n  AppTournamentState,\n} from '@razor/models';\nimport {\n  computeRaceDuration,\n  extractId,\n  ExtractIdType,\n  generateLeaderboard,\n  giveZeroPadding,\n} from '@razor/util';\n\nimport { EndRacePayload, StartRacePayload } from '../payloads';\nimport { playerNotFound, raceNotFound, tournamentNotFound } from '../raisers';\nimport { Dispatch, RootState } from '../store';\n\n/** Effect function for starting the countdown of the race.\n * Run the validation for the received payload.\n * If the player who pressed the start button and the relevant tournament are found, then the countdown will be started.\n * Tournament state will be changed to \"Countdown\".\n *\n * @param dispatch - Dispatch function from the store.\n * @param payload - Payload for starting the countdown of the\n * @param state - Current state model.\n *\n * ### Related reducers and effects\n * - setTournamentState (effect)\n * - updatePlayerReducer\n * - updateRaceReducer\n *\n * ### Related raisers\n * - tournamentNotFound\n * - playerNotFound\n */\nexport const startRace = (\n  dispatch: Dispatch,\n  payload: StartRacePayload,\n  state: RootState,\n): void => {\n  const { tournamentId, playerId, raceText } = payload;\n\n  // TODO: check race is ready to start\n\n  // If the tournament is not found, call the raiser.\n  if (!(tournamentId in state.game.tournamentsModel)) {\n    tournamentNotFound(dispatch, tournamentId, `Started by: ${playerId}`);\n    return;\n  }\n  // If the player who started the tournament is not found, call the raiser.\n  if (!(playerId in state.game.playersModel)) {\n    playerNotFound(\n      dispatch,\n      playerId,\n      `While tournament starting: ${tournamentId}`,\n    );\n    return;\n  }\n\n  // Number of races played in the past in this tournament.\n  const numberOfRacesBefore =\n    state.game.tournamentsModel[tournamentId].raceIds.length || 0;\n  // Race index for next tournament with zero padding. (e.g. 001, 002, 003...)\n  const raceIndex = giveZeroPadding(\n    numberOfRacesBefore.toString(),\n    RACE_ID_LENGTH,\n  );\n  // Compound race id.\n  const raceId: AppRaceId = `${tournamentId}-R:${raceIndex}`;\n  // Player profiles which need to add for the race details.\n  const players: AppPlayerProfiles = {};\n\n  // Adding players in the tournament at this moment to the race.\n  for (const id of state.game.tournamentsModel[tournamentId].playerIds) {\n    // If the player is not found, call the raiser.\n    if (!(id in state.game.playersModel)) {\n      playerNotFound(\n        dispatch,\n        id,\n        `While players are being added to: ${tournamentId}`,\n      );\n      return;\n    } else {\n      // Take the player in players model.\n      const player = state.game.playersModel[id];\n      players[id] = {\n        name: player.name,\n        avatarLink: player.avatarLink,\n      };\n\n      // Updating player state in playersModel. (\"Idle\" -> \"Racing\")\n      const playerData: AppPlayer = {\n        ...player,\n        state: AppPlayerState.Racing,\n      };\n      dispatch.game.updatePlayerReducer({\n        playerId: id,\n        player: playerData,\n      });\n    }\n  }\n\n  // Timeout duration for recived race text.\n  const timeoutDuration = computeRaceDuration(raceText);\n\n  // Race details.\n  const race: AppRace = {\n    text: raceText,\n    timeoutDuration: timeoutDuration,\n    startedTimestamp: new Date().getTime(),\n    players: players,\n    isOnGoing: true,\n    raceStartedBy: playerId,\n  };\n\n  // Updating tournament state in tournamentsModel. (\"Ready\" -> \"Race\")\n  dispatch.game.setTournamentState({\n    tournamentId,\n    tournamentState: AppTournamentState.Race,\n  });\n\n  // Add race to races model.\n  dispatch.game.addRaceReducer({\n    raceId,\n    race,\n  });\n};\n\n/** Effect function for ending race of the tournament.\n * Run the validation for the received payload.\n * If the race is found, then the race will be ended.\n * Leaderboard will be generated.\n * Tournament state will be updated to \"Leaderboard\".\n *\n * @param dispatch - The dispatch function of the store.\n * @param payload - The payload of the action.\n * @param state - The state of the store.\n *\n * ### Related reducers and effects\n * - updateTournamentReducer\n * - updateRaceReducer\n * - addLeaderboardReducer\n * - updatePlayerReducer\n *\n * ### Related raisers\n * - raceNotFound\n */\nexport const endRace = (\n  dispatch: Dispatch,\n  payload: EndRacePayload,\n  state: RootState,\n): void => {\n  const { raceId } = payload;\n\n  // If the race is not found, call the raiser.\n  if (!(raceId in state.game.racesModel)) {\n    raceNotFound(dispatch, raceId, 'While race ending');\n    return;\n  }\n\n  // Extract tournament id from race id.\n  const tournamentId: AppTournamentId = extractId(\n    raceId,\n    ExtractIdType.Race,\n    ExtractIdType.Tournament,\n  ) as AppTournamentId;\n\n  // Set tournament state to Leaderboard.\n  dispatch.game.setTournamentState({\n    tournamentId,\n    tournamentState: AppTournamentState.Leaderboard,\n  });\n\n  // Get received race text length.\n  const raceTextLength = state.game.racesModel[raceId].text.length;\n\n  // Get leaderboard from player logs and add leaderboard.\n  const leaderboard = generateLeaderboard(\n    state.game.playerLogsModel,\n    raceId,\n    raceTextLength,\n  );\n  dispatch.game.addLeaderboardReducer({\n    leaderboardId: raceId,\n    leaderboard,\n  });\n\n  // End race.\n  const race: AppRace = {\n    ...state.game.racesModel[raceId],\n    isOnGoing: false,\n  };\n  dispatch.game.updateRaceReducer({\n    raceId,\n    race,\n  });\n\n  // Set player state to \"Idle\" of all players in the tournament.\n  for (const id of state.game.tournamentsModel[tournamentId].playerIds) {\n    if (\n      id in state.game.playersModel &&\n      state.game.playersModel[id].state != AppPlayerState.Idle\n    ) {\n      const player: AppPlayer = {\n        ...state.game.playersModel[id],\n        state: AppPlayerState.Idle,\n      };\n\n      dispatch.game.updatePlayerReducer({\n        playerId: id,\n        player,\n      });\n    }\n  }\n};\n","import { ReplaceFullStatePayload } from '../payloads';\nimport { Dispatch } from '../store';\n\n/** Effect function for repalce full state\n * Replace the entire state with the given state.\n *\n * @param dispatch - The dispatch function of the store.\n * @param payload - The payload of the action.\n * @param state - The state of the store.\n *\n * ### Related reducers and effects\n * - replaceFullStateReducer\n *\n * ### Related raisers\n * - incompleteState\n */\nexport const replaceFullState = (\n  dispatch: Dispatch,\n  payload: ReplaceFullStatePayload,\n): void => {\n  const { parentState } = payload;\n  dispatch.game.replaceFullStateReducer({\n    parentState,\n  });\n};\n","import { AppTournament } from '@razor/models';\n\nimport { SetTournamentStatePayload } from '../payloads';\nimport { tournamentNotFound } from '../raisers';\nimport { Dispatch, RootState } from '../store';\n\n/** Effect function for setting tournament state.\n * Run the validation for the received payload.\n * If the tournament is found, then change the state of the tournament.\n *\n * @param dispatch - The dispatch function of the store.\n * @param payload - The payload of the action.\n * @param state - The state of the store.\n *\n * ### Related reducers and effects\n * - updateTournamentReducer\n *\n * ### Related raisers\n * - tournamentNotFound\n */\nexport const setTournamentState = (\n  dispatch: Dispatch,\n  payload: SetTournamentStatePayload,\n  state: RootState,\n): void => {\n  const { tournamentId, tournamentState } = payload;\n\n  if (!(tournamentId in state.game.tournamentsModel)) {\n    tournamentNotFound(dispatch, tournamentId, `While setting ready`);\n    return;\n  }\n\n  const tournament: AppTournament = {\n    ...state.game.tournamentsModel[tournamentId],\n    state: tournamentState,\n  };\n  dispatch.game.updateTournamentReducer({\n    tournamentId,\n    tournament,\n  });\n};\n","import { AppStateModel } from '@razor/models';\n\n/** Initial empty state model */\nexport const initialState: AppStateModel = {\n  tournamentsModel: {},\n  playersModel: {},\n  racesModel: {},\n  leaderboardsModel: {},\n  playerLogsModel: {},\n  errorLogsModel: {},\n};\n","export * from './add';\nexport * from './logger';\nexport * from './remove';\nexport * from './replace';\nexport * from './update';\n","// ### [Reducers] Basic add operations for store ### //\n\nimport { AppStateModel, AppTournamentId } from '@razor/models';\nimport { extractId, ExtractIdType } from '@razor/util';\n\nimport {\n  AddLeaderboardReducerPayload,\n  AddPlayerReducerPayload,\n  AddRaceReducerPayload,\n  AddTournamentReducerPayload,\n} from '../payloads';\n\n/** Reducer function for adding tournament to state model.\n * Tournament will be added to the tournaments model.\n *\n * @param state - Current state model\n * @param payload - Payload for add tournament\n * @returns New state model if successful, else current state model\n */\nexport const addTournamentReducer = (\n  state: AppStateModel,\n  payload: AddTournamentReducerPayload,\n): AppStateModel => {\n  const { tournamentId, tournament } = payload;\n  // If the tournament already exists.\n  if (tournamentId in state.tournamentsModel) {\n    return state;\n  }\n  /** State model with tournament added to tournaments model with data assigned. */\n  const newState: AppStateModel = {\n    ...state,\n    tournamentsModel: {\n      ...state.tournamentsModel,\n      [tournamentId]: tournament,\n    },\n  };\n  return newState;\n};\n\n/** Reducer function for adding race to state model.\n * Race will be added to the races model and race id will be added to the relevant tournament.\n *\n * @param state - Current state model\n * @param payload - Payload for adding race\n * @returns New state model if successful, else current state model\n */\nexport const addRaceReducer = (\n  state: AppStateModel,\n  payload: AddRaceReducerPayload,\n): AppStateModel => {\n  const { raceId, race } = payload;\n  /** Extract tournaemnt id from race id */\n  const tournamentId: AppTournamentId = extractId(\n    raceId,\n    ExtractIdType.Race,\n    ExtractIdType.Tournament,\n  );\n  // If the tournament does not exists.\n  if (!(tournamentId in state.tournamentsModel)) {\n    return state;\n  }\n  // If race already exists.\n  if (raceId in state.racesModel) {\n    return state;\n  }\n  /** State model with new race added to races model and race id added to the tournament. */\n  const newState: AppStateModel = {\n    ...state,\n    tournamentsModel: {\n      ...state.tournamentsModel,\n      [tournamentId]: {\n        ...state.tournamentsModel[tournamentId],\n        raceIds: [...state.tournamentsModel[tournamentId].raceIds, raceId],\n      },\n    },\n    racesModel: {\n      ...state.racesModel,\n      [raceId]: { ...race },\n    },\n  };\n  return newState;\n};\n\n/** Reducer function for adding a player to the state model.\n * Player will be added to the players model and the player id will be added to the relevant tournament.\n *\n * @param state - Current state model\n * @param payload - Payload for add leaderboard\n * @returns New state model if successful, else current state model\n */\nexport const addPlayerReducer = (\n  state: AppStateModel,\n  payload: AddPlayerReducerPayload,\n): AppStateModel => {\n  const { tournamentId, playerId, player } = payload;\n  // If the tournament does not exists.\n  if (!(tournamentId in state.tournamentsModel)) {\n    return state;\n  }\n  // If the player already exists.\n  if (playerId in state.playersModel) {\n    return state;\n  }\n  /** State model with new player added to players model and player id added to the tournament. */\n  const newState: AppStateModel = {\n    ...state,\n    tournamentsModel: {\n      ...state.tournamentsModel,\n      [tournamentId]: {\n        ...state.tournamentsModel[tournamentId],\n        playerIds: [\n          ...state.tournamentsModel[tournamentId].playerIds,\n          playerId,\n        ],\n      },\n    },\n    playersModel: {\n      ...state.playersModel,\n      [playerId]: { ...player },\n    },\n  };\n  return newState;\n};\n\n/** Reducer function for adding leaderboard to state model.\n * Leaderboard will be added to the leaderboards model.\n *\n * @param state - Current state model\n * @param payload - Payload for add leaderboard\n * @returns New state model if successful, else current state model\n */\nexport const addLeaderboardReducer = (\n  state: AppStateModel,\n  payload: AddLeaderboardReducerPayload,\n): AppStateModel => {\n  const { leaderboardId, leaderboard } = payload;\n  // If leaderboard already exists.\n  if (leaderboardId in state.leaderboardsModel) {\n    return state;\n  }\n  /** State model with new leaderboard added to leaderboards model. */\n  const newState: AppStateModel = {\n    ...state,\n    leaderboardsModel: {\n      ...state.leaderboardsModel,\n      [leaderboardId]: [...leaderboard],\n    },\n  };\n  return newState;\n};\n","// ### [Reducers] Basic logger operations for store ### //\n\nimport { MAX_ERR_LOGS_COUNT } from '@razor/constants';\nimport { AppErrorTimestamp, AppStateModel } from '@razor/models';\nimport { omit } from 'lodash';\n\nimport { LogErrorReducerPayload } from '../payloads';\n\n/** Reducer function for logging an error to state model.\n * Error will be added to the errors model.\n * If the errors model is at its max capacity, the oldest errors will be removed.\n \n * @param state - Current state model\n * @param payload - Payload for log error\n * @returns New state model if successful, else current state model\n */\nexport const logErrorReducer = (\n  state: AppStateModel,\n  payload: LogErrorReducerPayload,\n): AppStateModel => {\n  const { errorLog, errorTimestamp } = payload;\n  let logModel = { ...state.errorLogsModel };\n\n  const maxLogs = MAX_ERR_LOGS_COUNT;\n  /** Current logs length */\n  const logsLength = Object.keys(logModel).length;\n\n  /** Number of logs exceeding the limit */\n  let logDiff = maxLogs - logsLength;\n  // While logs are exceeding the limit.\n  while (logDiff <= 0) {\n    /** Oldest log id */\n    const lastKey: AppErrorTimestamp = Object.keys(logModel)[0];\n    /** New logs model after removing the oldest. */\n    const newLogsModel = omit(logModel, [lastKey]);\n    logModel = { ...newLogsModel };\n    logDiff++;\n  }\n\n  /** State model with new error log added to errors model. */\n  const newState: AppStateModel = {\n    ...state,\n    errorLogsModel: {\n      ...logModel,\n      [errorTimestamp]: errorLog,\n    },\n  };\n\n  return newState;\n};\n","module.exports = require(\"lodash\");","// ### [Reducers] Basic remove operations for store ### //\n\nimport {\n  AppPlayerId,\n  AppPlayerLogId,\n  AppRaceId,\n  AppStateModel,\n} from '@razor/models';\nimport { omit } from 'lodash';\n\nimport {\n  RemovePlayerReducerPayload,\n  RemoveTournamentReducerPayload,\n} from '../payloads';\n\n/** Reducer function for removing the player from the state model.\n * Player will be removed from players model.\n * Related player ids array of the tournament will be updated.\n *\n * @param state - Current state model\n * @param payload - Payload for removing player\n * @returns New state model if successful, else current state model\n */\nexport const removePlayerReducer = (\n  state: AppStateModel,\n  payload: RemovePlayerReducerPayload,\n): AppStateModel => {\n  const { tournamentId, playerId } = payload;\n  // If the player does not exists.\n  if (!(playerId in state.playersModel)) {\n    return state;\n  }\n  // If the tournament does not exists.\n  if (!(tournamentId in state.tournamentsModel)) {\n    return state;\n  }\n  /** New players model after removing specific player. */\n  const newPlayersModel = omit(state.playersModel, [playerId]);\n  /** State model after player removed from players model. */\n  const newState: AppStateModel = {\n    ...state,\n    tournamentsModel: {\n      ...state.tournamentsModel,\n      [tournamentId]: {\n        ...state.tournamentsModel[tournamentId],\n        playerIds: state.tournamentsModel[tournamentId].playerIds.filter(\n          id => id !== playerId,\n        ),\n      },\n    },\n    playersModel: {\n      ...newPlayersModel,\n    },\n  };\n  return newState;\n};\n\n/** Reducer function for removing tournament from state model.\n * Tournament will be removed from the tournament model.\n * Each player of the tournament will be removed from the players model.\n * Each race of the tournament will be removed from the races model.\n * Each player log of the tournament will be removed from the player logs model.\n *\n * @param state - Current state model\n * @param payload - Payload for removing tournament\n * @returns New state model if successful, else current state model\n */\nexport const removeTournamentReducer = (\n  state: AppStateModel,\n  payload: RemoveTournamentReducerPayload,\n): AppStateModel => {\n  const { tournamentId } = payload;\n  // If the tournament does not exists.\n  if (!(tournamentId in state.tournamentsModel)) {\n    return state;\n  }\n  /** Player ids array of the tournament. */\n  const playerIds = state.tournamentsModel[tournamentId].playerIds;\n  /** Race ids array of the tournament. */\n  const raceIds = state.tournamentsModel[tournamentId].raceIds;\n  /** Empty array for player log id. */\n  let playerLogIds: AppPlayerLogId[] = [];\n\n  // For every race in the tournament.\n  raceIds.forEach((raceId: AppRaceId) => {\n    /** Relavant race in races model. */\n    const race = state.racesModel[raceId];\n    /** Every player ids of the race. */\n    const playerIds = Object.keys(race.players) as AppPlayerId[];\n\n    // Removing relevant player logs from player logs model.\n    const specificPlayerLogsId = playerIds.map(\n      (playerId: AppPlayerId): AppPlayerLogId => {\n        return `${raceId}-${playerId}`;\n      },\n    );\n    playerLogIds = playerLogIds.concat(specificPlayerLogsId);\n  });\n\n  /** New tournaments model after removing specific tournaments. */\n  const newTournamentModel = omit(state.tournamentsModel, [tournamentId]);\n\n  /** State model after removing specific tournament. */\n  const newState: AppStateModel = {\n    ...state,\n    tournamentsModel: {\n      ...newTournamentModel,\n    },\n  };\n\n  // Generating new players model by removing all players of the tournament.\n  playerIds.forEach(playerId => {\n    const newPlayersModel = omit(newState.playersModel, [playerId]);\n    newState.playersModel = {\n      ...newPlayersModel,\n    };\n  });\n\n  // Generating a new races model by removing all races of the tournament.\n  raceIds.forEach(raceId => {\n    const newRacesModel = omit(newState.racesModel, [raceId]);\n    newState.racesModel = {\n      ...newRacesModel,\n    };\n  });\n\n  // Generating new player logs model by removing all player logs of the tournament.\n  playerLogIds.forEach(playerLogId => {\n    const newPlayerLogsModel = omit(state.playerLogsModel, [playerLogId]);\n    newState.playerLogsModel = {\n      ...newPlayerLogsModel,\n    };\n  });\n  return newState;\n};\n","// ### [Reducers] Replace operations for store ### //\n// Replace functions will replace the state with the given payload. These methods will be used for syncing client state with server state.\n\nimport { AppStateModel } from '@razor/models';\n\nimport { ReplaceFullStateReducerPayload } from '../payloads';\n\n/** Reducer function for replacing entire state.\n * Newly joining players will use this reducer to replace their current state with the state from the server.\n *\n * @param state - Current state model\n * @param payload - Payload for replacing state\n */\nexport const replaceFullStateReducer = (\n  state: AppStateModel,\n  payload: ReplaceFullStateReducerPayload,\n): AppStateModel => {\n  const { parentState } = payload;\n  /** State model after replacing full game */\n  const newState: AppStateModel = {\n    ...parentState,\n    errorLogsModel: {\n      ...state.errorLogsModel,\n    },\n  };\n  return newState;\n};\n","// ### [Reducers] Basic update operations for store ### //\n\nimport { AppStateModel } from '@razor/models';\n\nimport {\n  UpdatePlayerLogReducerPayload,\n  UpdatePlayerReducerPayload,\n  UpdateRaceReducerPayload,\n  UpdateTournamentReducerPayload,\n} from '../payloads';\n\n/** Reducer function for updating a tournament in the state model.\n * Tournament in tournaments model will be updated with the given tournament.\n *\n * @param state - Current state model\n * @param payload - Payload for update tournament\n * @returns New state model if successful, else current state model\n */\nexport const updateTournamentReducer = (\n  state: AppStateModel,\n  payload: UpdateTournamentReducerPayload,\n): AppStateModel => {\n  const { tournamentId, tournament } = payload;\n  // If the tournament does not exists.\n  if (!(tournamentId in state.tournamentsModel)) {\n    return state;\n  }\n  /** State model after updating specific tournament in tournaments model. */\n  const newState: AppStateModel = {\n    ...state,\n    tournamentsModel: {\n      ...state.tournamentsModel,\n      [tournamentId]: {\n        ...tournament,\n      },\n    },\n  };\n  return newState;\n};\n\n/** Reducer function for updating a race in the state model.\n * Race in races model will be updated with the given race.\n *\n * @param state - Current state model\n * @param payload - Payload for update race\n * @returns New state model if successful, else current state model\n */\nexport const updateRaceReducer = (\n  state: AppStateModel,\n  payload: UpdateRaceReducerPayload,\n): AppStateModel => {\n  const { raceId, race } = payload;\n  // If the race does not exists.\n  if (!(raceId in state.racesModel)) {\n    return state;\n  }\n  /** State model after updating specific race in races model. */\n  const newState: AppStateModel = {\n    ...state,\n    racesModel: {\n      ...state.racesModel,\n      [raceId]: {\n        ...race,\n      },\n    },\n  };\n  return newState;\n};\n\n/** Reducer function for updating a player in the state model.\n * Player in players model will be updated with the given player.\n *\n * @param state - Current state model\n * @param payload - Payload for update player\n * @returns New state model if successful, else current state model\n */\nexport const updatePlayerReducer = (\n  state: AppStateModel,\n  payload: UpdatePlayerReducerPayload,\n): AppStateModel => {\n  const { playerId, player } = payload;\n  // If the player does not exists.\n  if (!(playerId in state.playersModel)) {\n    return state;\n  }\n  /** State model after updating specific player in players model. */\n  const newState: AppStateModel = {\n    ...state,\n    playersModel: {\n      ...state.playersModel,\n      [playerId]: {\n        ...player,\n      },\n    },\n  };\n  return newState;\n};\n\n/** Reducer function for updating a player log-in state model.\n * Player log-in player logs model will be updated with the given player log.\n *\n * @param state - Current state model\n * @param payload - Payload for updating player log\n * @returns New state model if successful, else current state model\n */\nexport const updatePlayerLogReducer = (\n  state: AppStateModel,\n  payload: UpdatePlayerLogReducerPayload,\n): AppStateModel => {\n  const { playerLogId, playerLog } = payload;\n\n  const existingPlayerLogs = state.playerLogsModel[playerLogId] || [];\n  const updatedPlayerLogs = Array.isArray(playerLog)\n    ? [...existingPlayerLogs, ...playerLog]\n    : [...existingPlayerLogs, playerLog];\n\n  /** State model after updating specific player log-in player logs model. */\n  const newState: AppStateModel = {\n    ...state,\n    playerLogsModel: {\n      ...state.playerLogsModel,\n      [playerLogId]: updatedPlayerLogs,\n    },\n  };\n  return newState;\n};\n","module.exports = require(\"express\");","module.exports = require(\"http\");","module.exports = require(\"socket.io\");","export * from './clear-player.controller';\nexport * from './create-tournament.controller';\nexport * from './inform-timeout.controller';\nexport * from './join-tournament.controller';\nexport * from './race-end.controller';\nexport * from './start-race.controller';\nexport * from './update-type-logs.controller';\n","import { SocketProtocols } from '@razor/models';\nimport { store } from '@razor/store';\n\nimport { AllServerPubSubEventsToTypeMap, PubSubEvents } from '../models';\nimport { Logger, publishToAllClients, pubsub } from '../services';\n\nconst logger = new Logger('clear-player.controller');\n\ntype PlayerDisconnectArgs =\n  AllServerPubSubEventsToTypeMap[PubSubEvents.PlayerDisconnect];\n\nconst playerDisconnectController = ({\n  context,\n  data,\n}: PlayerDisconnectArgs): void => {\n  const { playerId } = data;\n  const game = store.getState().game;\n  const player = game.playersModel[playerId];\n  const tournamentId = player.tournamentId;\n\n  // Clear player from the store.\n  store.dispatch.game.clearPlayer({ playerId });\n  logger.info('Player cleared from store', context);\n\n  publishToAllClients({\n    tournamentId,\n    protocol: SocketProtocols.ClearPlayer,\n    data: { playerId },\n  });\n};\n\npubsub.subscribe(PubSubEvents.PlayerDisconnect, playerDisconnectController);\n","export * from './pubsub-events';\n","import {\n  InitialProtocolToTypeMap,\n  OtherProtocolToTypeMap,\n  PlayerId,\n  RaceId,\n  SocketId,\n  SocketProtocolsTypes,\n  TournamentId,\n} from '@razor/models';\n\nimport { ContextOutput } from '../services';\n\n// TODO: change to ServerUniqueEvents\n/** Pubsub events exceptional to server */\nexport enum PubSubEvents {\n  // Events publish by controllers\n\n  /** This will usually trigger by controllers when an event need to send to a specific client.  */\n  SendDataToClient = 'send-data-to-client',\n  /** This will usually trigger by controllers when an event need to send to all clients. */\n  SendDataToAll = 'send-data-to-all',\n\n  // Events publish by services\n\n  /** Notify the player-disconnect event to controllers. */\n  PlayerDisconnect = 'player-disconnect',\n  /** Notify when the race ends.\n   * The race can end in two ways: when the server timer runs out or when all players complete the race.\n   * (Players will finish their race either due to a client timeout or by sending the last type log.)\n   *\n   * This event will be published in one of the following ways:\n   * - From the start-race controller after the server race timeout.\n   * - By updating the type-logs controller after all players have sent their last type log.\n   * - By informing the timeout controller after all players have timed out on the client side.\n   *\n   * Subscribing to this event should be handled by the race-end controller.\n   */\n  RaceEnd = 'race-end',\n\n  /** Start and end events for type log listening.\n   * Which push collected type logs to players at a specific interval\n   * and clear type logs queue.\n   */\n  StartTypeLogListening = 'type-log-listen-start',\n  EndTypeLogListening = 'type-log-listen-end',\n}\n\n// Models\nexport interface SendDataToClientModel {\n  playerId: PlayerId;\n  protocol: SocketProtocolsTypes;\n  data: object;\n}\n\nexport interface SendDataToAllModel {\n  tournamentId: TournamentId;\n  protocol: SocketProtocolsTypes;\n  data: object;\n}\n\nexport interface PlayerDisconnectModel {\n  data: { playerId: PlayerId };\n  context: ContextOutput;\n}\n\nexport interface RaceEndModel {\n  data: { raceId: RaceId };\n  context: ContextOutput;\n}\n\nexport interface TypeLogListeningModel {\n  data: { raceId: RaceId };\n  context: ContextOutput;\n}\n\nexport interface ServerUniqueEventsToTypeMap extends Record<string, object> {\n  [PubSubEvents.SendDataToClient]: SendDataToClientModel;\n  [PubSubEvents.SendDataToAll]: SendDataToAllModel;\n  [PubSubEvents.PlayerDisconnect]: PlayerDisconnectModel;\n  [PubSubEvents.RaceEnd]: RaceEndModel;\n  [PubSubEvents.StartTypeLogListening]: TypeLogListeningModel;\n  [PubSubEvents.EndTypeLogListening]: TypeLogListeningModel;\n}\n\ntype ModifiedEvent<T extends object, AdditionalProps extends object> = {\n  data: T;\n  context: ContextOutput;\n} & AdditionalProps;\n\ntype ModifiedInitialProtocolToTypeMap = {\n  [K in keyof InitialProtocolToTypeMap]: ModifiedEvent<\n    InitialProtocolToTypeMap[K],\n    { socketId: SocketId }\n  >;\n};\n\ntype ModifiedOtherProtocolToTypeMap = {\n  [K in keyof OtherProtocolToTypeMap]: ModifiedEvent<\n    OtherProtocolToTypeMap[K],\n    { playerId: PlayerId; tournamentId: TournamentId }\n  >;\n};\n\nexport type AllServerPubSubEventsToTypeMap = ServerUniqueEventsToTypeMap &\n  ModifiedInitialProtocolToTypeMap &\n  ModifiedOtherProtocolToTypeMap;\n","export * from './logger';\nexport * from './main-utils';\nexport * from './pubsub';\n","export * from './logger';\n","import {\n  AppTournamentState,\n  PlayerId,\n  playerIdSchema,\n  RaceId,\n  SocketId,\n  TournamentId,\n} from '@razor/models';\nimport { store } from '@razor/store';\n\nimport { tokenPlayerMap } from '../../stores';\n\nimport { cloudLogger } from './cloud-logger';\nimport { localLogger } from './local-logger';\n\nlet wlogger = null;\nif (process.env.NODE_ENV === 'development') {\n  wlogger = localLogger();\n} else {\n  wlogger = cloudLogger();\n}\n\ninterface ContextInput {\n  identifier: PlayerId | SocketId;\n}\n\nexport interface ContextOutput {\n  subject: string;\n  // both playerId and socketId won't be available at the same time.\n  playerId?: PlayerId;\n  // socket Id will be available only for initial events.\n  socketId?: SocketId;\n  domainId?: TournamentId | RaceId | null;\n}\n\nexport class Logger {\n  constructor(protected subject: string) {}\n\n  public createContext({ identifier }: ContextInput): ContextOutput {\n    let domainId: TournamentId | RaceId;\n\n    let socketId = '';\n    let playerId: PlayerId;\n\n    // When creating context both playerId and socketId can be used as identifier.\n    // here we are checking whether identifier is playerId or socketId.\n    if (playerIdSchema.safeParse(identifier).success) {\n      playerId = identifier as PlayerId;\n      socketId = tokenPlayerMap.getSocketIdByPlayerId(identifier as PlayerId);\n\n      // Update domain id as race id if tournament is in race state. else update as tournament id.\n      const game = store.getState().game;\n      const tournamentId = game.playersModel[identifier]?.tournamentId || null;\n      if (\n        game.tournamentsModel[tournamentId]?.state === AppTournamentState.Race\n      ) {\n        const raceIds = game.tournamentsModel[tournamentId].raceIds;\n        const raceId = raceIds[raceIds.length - 1];\n        domainId = raceId;\n      } else {\n        domainId = tournamentId;\n      }\n    } else {\n      socketId = identifier;\n    }\n\n    return {\n      subject: this.subject,\n      playerId,\n      socketId,\n      domainId,\n    };\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public error<T extends object>(\n    message: string,\n    context: ContextOutput,\n    additionalData?: T,\n  ): void {\n    wlogger.error(message, { context, ...additionalData });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public warn<T extends object>(\n    message: string,\n    context: ContextOutput,\n    additionalData?: T,\n  ): void {\n    wlogger.warn(message, { context, ...additionalData });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public info<T extends object>(\n    message: string,\n    context: ContextOutput,\n    additionalData?: T,\n  ): void {\n    wlogger.info(message, { context, ...additionalData });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public debug<T extends object>(\n    message: string,\n    context: ContextOutput,\n    additionalData?: T,\n  ): void {\n    wlogger.debug(message, { context, ...additionalData });\n  }\n}\n","export * from './token-player-map';\n","import { AuthToken, PlayerId, SocketId } from '@razor/models';\n\nexport interface MapData {\n  playerId?: PlayerId;\n  socketId: SocketId;\n}\n\ninterface MapAsObject {\n  [key: string]: MapData;\n}\n\nclass TokenPlayerMap {\n  private map: Map<AuthToken, MapData> = new Map<PlayerId, MapData>();\n\n  /** Create new map entry with auth token and socket Id.\n   * @param authToken - auth token of the player\n   * @param socketId - socket id of the player\n   */\n  addSocketId(authToken: AuthToken, socketId: SocketId): void {\n    this.map.set(authToken, { socketId });\n  }\n\n  /** Add player id to the existing map entry.\n   * @param socketId - socket id of the player\n   * @param playerId - player id of the player\n   */\n  addPlayerId(socketId: SocketId, playerId: PlayerId): void {\n    for (const [key, value] of this.map.entries()) {\n      if (value.socketId === socketId) {\n        this.map.set(key, { ...value, playerId });\n      }\n    }\n  }\n\n  /** Get player data using auth token .\n   * @param authToken - auth token of the player\n   * @returns player data if player exists, null otherwise\n   */\n  getPlayer(authToken: AuthToken): MapData | null {\n    const data = this.map.get(authToken);\n    if (data) {\n      return data;\n    }\n    return null;\n  }\n\n  /** Update existing player socket id. If player does not exist, throw error.\n   * @param authToken - auth token of the player\n   * @param socketId - socket id of the player\n   */\n  updatePlayerSocketId(authToken: AuthToken, socketId: SocketId): void {\n    const data = this.map.get(authToken);\n    if (data) {\n      this.map.set(authToken, { ...data, socketId });\n    } else {\n      throw new Error('Player does not exist');\n    }\n  }\n\n  /** Get player id using socket id.\n   * @param socketId - socket id of the player\n   * @returns player id if player exists, null otherwise\n   */\n  getPlayerIdBySocketId(socketId: SocketId): PlayerId | null {\n    for (const [_key, value] of this.map.entries()) {\n      if (value.socketId === socketId) {\n        return value.playerId;\n      }\n    }\n    return null;\n  }\n\n  /** Get socket id using player id.\n   * @param playerId - player id of the player\n   * @returns socket id if player exists, null otherwise\n   */\n  getSocketIdByPlayerId(playerId: PlayerId): SocketId | null {\n    for (const [_key, value] of this.map.entries()) {\n      if (value.playerId === playerId) {\n        return value.socketId;\n      }\n    }\n    return null;\n  }\n\n  /** Get auth token using socket id.\n   * @param socketId - socket id of the player\n   * @returns auth token if player exists, null otherwise\n   */\n  getAuthTokenBySocketId(socketId: SocketId): AuthToken | null {\n    for (const [key, value] of this.map.entries()) {\n      if (value.socketId === socketId) {\n        return key;\n      }\n    }\n    return null;\n  }\n\n  /** Get all entries\n   * @returns - map as a object\n   */\n  viewMap(): MapAsObject {\n    return Object.fromEntries(this.map);\n  }\n\n  /** Clear a player from the map.\n   * @param authToken - auth token of the player\n   */\n  clearPlayer(authToken: AuthToken): void {\n    this.map.delete(authToken);\n  }\n}\n\nexport const tokenPlayerMap = new TokenPlayerMap();\n","import { createLogger, format, Logger, transports } from 'winston';\n\nimport { LogLevels, logLevels } from './levels';\n\nconst { combine, errors, printf } = format;\n\n// Google Cloud Severity Levels\nconst severityMap: Map<string, string> = new Map([\n  [LogLevels.Error, 'ERROR'],\n  [LogLevels.Warn, 'WARNING'],\n  [LogLevels.Info, 'INFO'],\n  [LogLevels.Debug, 'DEBUG'],\n]);\n\nconst logFormat = printf(({ service, context, level, message, ...args }) => {\n  const { subject, ...contextData } = context;\n  const log = {\n    service,\n    subject,\n    severity: severityMap.get(level),\n    message,\n    context: { ...contextData },\n    args: Object.keys(args).length ? args : undefined,\n  };\n  return JSON.stringify(log);\n});\n\nexport const cloudLogger = (): Logger => {\n  return createLogger({\n    level: 'debug',\n    levels: logLevels,\n    format: combine(errors({ stack: true }), logFormat),\n    defaultMeta: { service: 'LOGGER' },\n    transports: [new transports.Console()],\n  });\n};\n","module.exports = require(\"winston\");","export enum LogLevels {\n  Error = 'error',\n  Warn = 'warn',\n  Info = 'info',\n  Debug = 'debug',\n}\n\nexport const logLevels = {\n  [LogLevels.Error]: 0,\n  [LogLevels.Warn]: 1,\n  [LogLevels.Info]: 2,\n  [LogLevels.Debug]: 3,\n};\n","import { addColors, createLogger, format, Logger, transports } from 'winston';\n\nimport { logLevels } from './levels';\n\nconst { printf, timestamp, combine, colorize, errors } = format;\n\nconst logFormat = printf(\n  ({ service, level, message, timestamp, context, ...args }) => {\n    const { subject, ...contextData } = context;\n    const additionalData = {\n      contextData,\n      args: Object.keys(args).length ? args : undefined,\n    };\n    return `[${service}] (${subject}) ${level}: ${timestamp} - ${message} - ${JSON.stringify(\n      additionalData,\n    )}`;\n  },\n);\n\nexport const localLogger = (): Logger => {\n  addColors({\n    error: 'bold red',\n    warn: 'bold yellow',\n    info: 'blue',\n    debug: 'dim white',\n  });\n\n  return createLogger({\n    level: 'debug',\n    levels: logLevels,\n    format: combine(\n      colorize({ all: true }),\n      errors({ stack: true }),\n      timestamp({ format: 'YYYY-MM-DD hh:mm:ss A' }),\n      logFormat,\n    ),\n    defaultMeta: { service: 'LOGGER' },\n    transports: [\n      new transports.Console(),\n      new transports.File({ filename: 'error.log', level: 'error' }),\n      new transports.File({ filename: 'combined.log' }),\n    ],\n  });\n};\n","export * from './check-reconnected';\nexport * from './publish-on-receive';\nexport * from './send-data-to-clients';\n","import { RECONNECT_WAITING_TIME } from '@razor/constants';\nimport { AuthToken } from '@razor/models';\nimport { Server } from 'socket.io';\n\nimport { PubSubEvents } from '../../models';\nimport { tokenPlayerMap } from '../../stores';\nimport { Logger } from '../logger';\nimport { pubsub } from '../pubsub';\n\nexport function checkReconnected(authToken: AuthToken, io: Server): void {\n  const logger = new Logger('reconnector');\n\n  setTimeout(() => {\n    if (!tokenPlayerMap.getPlayer(authToken)) {\n      return;\n    }\n    // Get socket id from current player data. If player connected again socket id should be already updated.\n    const { socketId, playerId } = tokenPlayerMap.getPlayer(authToken);\n    // Creating context again if player reconnected some properties may be changed (such as socket id).\n    const context = logger.createContext({ identifier: playerId });\n\n    const isSocketConnected = io.sockets.sockets.get(socketId)?.connected;\n    if (!isSocketConnected) {\n      // If player still not connected then delete the player from map.\n      tokenPlayerMap.clearPlayer(authToken);\n      logger.debug(\n        `User deleted from the map after waiting for ${RECONNECT_WAITING_TIME}ms.`,\n        context,\n      );\n\n      pubsub.publish(PubSubEvents.PlayerDisconnect, {\n        data: {\n          playerId,\n        },\n        context,\n      });\n    } else {\n      logger.debug('User already connected from a new socket.', context);\n    }\n  }, RECONNECT_WAITING_TIME);\n}\n","import {\n  AllProtocolToTypeMap,\n  PlayerId,\n  SocketProtocolsTypes,\n  TournamentId,\n} from '@razor/models';\nimport { PubSub } from '@razor/util';\n\nimport { AllServerPubSubEventsToTypeMap, PubSubEvents } from '../models';\n\n/**\n * Server pubsub has two types of events\n * 1. socket events from client - when client sends socket event it will be published to server pubsub\n *    Related event mapping - {@link socketEventsMap}\n * 2. server events - events triggered by server\n *    Related events - {@link PubSubEvents}\n */\nexport const pubsub = new PubSub<AllServerPubSubEventsToTypeMap>();\n\nexport function publishToSingleClient<T extends SocketProtocolsTypes>({\n  playerId,\n  protocol,\n  data,\n}: {\n  playerId: PlayerId;\n  protocol: T;\n  data: AllProtocolToTypeMap[T];\n}): void {\n  pubsub.publish(PubSubEvents.SendDataToClient, {\n    playerId,\n    protocol,\n    data,\n  });\n}\n\nexport function publishToAllClients<T extends SocketProtocolsTypes>({\n  tournamentId,\n  protocol,\n  data,\n}: {\n  tournamentId: TournamentId;\n  protocol: T;\n  data: AllProtocolToTypeMap[T];\n}): void {\n  pubsub.publish(PubSubEvents.SendDataToAll, {\n    tournamentId,\n    protocol,\n    data,\n  });\n}\n","import {\n  protocolToSchemaMap,\n  SocketProtocols,\n  SocketProtocolsTypes,\n  TournamentId,\n} from '@razor/models';\nimport { store } from '@razor/store';\nimport { Socket } from 'socket.io';\n\nimport { tokenPlayerMap } from '../../stores';\nimport { ContextOutput, Logger } from '../logger';\nimport { pubsub } from '../pubsub';\n\ninterface receiverArgs<T> {\n  event: SocketProtocolsTypes;\n  data: T;\n  socket: Socket;\n}\n\nconst logger = new Logger('receiver');\n\ninterface validateSchemaArgs<T> {\n  event: SocketProtocolsTypes;\n  data: T;\n  context: ContextOutput;\n}\n\nfunction validateSchema<T>({\n  event,\n  data,\n  context,\n}: validateSchemaArgs<T>): boolean {\n  try {\n    const schema = protocolToSchemaMap.get(event);\n    schema.parse(data);\n    return true;\n  } catch (error) {\n    logger.warn(`Received data invalid. (zod-error) ${error}`, context, {\n      protocolName: event,\n      protocolData: data,\n    });\n    return false;\n  }\n}\n\nexport function publishOnReceive<T>({\n  event,\n  data,\n  socket,\n}: receiverArgs<T>): void {\n  let context: ContextOutput;\n\n  if (\n    event === SocketProtocols.JoinLobbyRequest ||\n    event === SocketProtocols.CreateLobbyRequest\n  ) {\n    // If player is new, player may not have playerId yet. So we use socket id to create context and publish event.\n    // Player id will be created in the controller.\n    const socketId = socket.id;\n    context = logger.createContext({ identifier: socketId });\n\n    const isValid = validateSchema({ event, data, context });\n    if (!isValid) {\n      return;\n    }\n    pubsub.publish(event, { data, context, socketId });\n  } else {\n    const playerId = tokenPlayerMap.getPlayerIdBySocketId(socket.id);\n\n    if (!playerId) {\n      logger.warn('Player not found.', context);\n      return;\n    }\n\n    // Creating logger context\n    context = logger.createContext({ identifier: playerId });\n\n    const isValid = validateSchema({ event, data, context });\n    if (!isValid) {\n      return;\n    }\n\n    // Get allocated socket room id/s (In socket io first id is always individual socket id)\n    const socketRoomIds = [...socket.rooms]?.slice(1);\n    if (!socketRoomIds) {\n      logger.warn('Player not belongs to any rooms.', context);\n      return;\n    }\n\n    // If player assigned to multiple rooms, we will use the last room id.\n    const socketRoomId = socketRoomIds[\n      socketRoomIds.length - 1\n    ] as TournamentId;\n\n    const game = store.getState().game;\n\n    // Verify room id with tournament id in store.\n    const tournament = game.tournamentsModel[socketRoomId];\n    if (!tournament) {\n      logger.warn(\n        'The tournament which related to socket room is not available in the store.',\n        context,\n      );\n      return;\n    }\n\n    // Verify whether player belongs to the tournament.\n    if (tournament.playerIds.includes(playerId) === false) {\n      logger.warn('Player not belongs to the tournament.', context);\n      return;\n    }\n\n    pubsub.publish(event, {\n      data,\n      context,\n      playerId,\n      tournamentId: socketRoomId,\n    });\n  }\n  logger.info(`Protocol: ${event} | Message received.`, context, { data });\n}\n","import { InitialServerData, SocketProtocols } from '@razor/models';\nimport { Server } from 'socket.io';\n\nimport { PubSubEvents } from '../../models';\nimport { tokenPlayerMap } from '../../stores';\nimport { pubsub } from '..';\n\n/**\n * Listening to related pubsub events and send data to the client.\n * @param io Socket.io server instance\n */\nexport function emitSocketMessages(io: Server): void {\n  // If `Send Data To Client` event is published, then this function will send data to the client.\n  const sendData = ({ playerId, protocol, data }): void => {\n    const socketId = tokenPlayerMap.getSocketIdByPlayerId(playerId);\n    // Add player to specific socket room when player joining or creating room.\n    // Socket room has the tournament id. So we can send data to specific lobby(All players in a specific tournament).\n    if (\n      protocol === SocketProtocols.CreateLobbyAccept ||\n      protocol === SocketProtocols.JoinLobbyAccept\n    ) {\n      const { tournamentId }: InitialServerData = data;\n      io.sockets.sockets.get(socketId).join(tournamentId);\n    }\n    io.to(socketId).emit(protocol, data);\n  };\n  pubsub.subscribe(PubSubEvents.SendDataToClient, sendData);\n\n  const SendDataToAll = ({ tournamentId, protocol, data }): void => {\n    io.to(tournamentId).emit(protocol, data);\n  };\n  pubsub.subscribe(PubSubEvents.SendDataToAll, SendDataToAll);\n}\n","import { InitialServerData, Snapshot, SocketProtocols } from '@razor/models';\nimport { store } from '@razor/store';\n\nimport { AllServerPubSubEventsToTypeMap } from '../models';\nimport { Logger, publishToSingleClient, pubsub } from '../services';\nimport { tokenPlayerMap } from '../stores';\n\nconst logger = new Logger('create-tournament.controller');\n\ntype CreateTournamentArgs =\n  AllServerPubSubEventsToTypeMap[SocketProtocols.CreateLobbyRequest];\n\nconst createTournamentController = ({\n  data,\n  context,\n  socketId,\n}: CreateTournamentArgs): void => {\n  const { playerName } = data;\n  const playerId = store.dispatch.game.joinPlayer({\n    receivedTournamentId: '',\n    playerName,\n  });\n  if (!playerId) {\n    logger.error(\"Store didn't send a playerId\", context);\n    return;\n  }\n  logger.debug('Player added to the store', context);\n\n  tokenPlayerMap.addPlayerId(socketId, playerId);\n  logger.debug('Player added to tokenPlayerMap', context);\n\n  const state = store.getState().game;\n  const player = state.playersModel[playerId];\n  const tournamentId = player.tournamentId;\n  const tournament = state.tournamentsModel[tournamentId];\n\n  const snapshot: Snapshot = {\n    tournamentsModel: {\n      [tournamentId]: tournament,\n    },\n    playersModel: {\n      [playerId]: player,\n    },\n    racesModel: {},\n    leaderboardsModel: {},\n    playerLogsModel: {},\n  };\n\n  const initialServerData: InitialServerData = {\n    playerId,\n    tournamentId,\n    snapshot,\n  };\n\n  publishToSingleClient({\n    playerId,\n    protocol: SocketProtocols.CreateLobbyAccept,\n    data: initialServerData,\n  });\n};\n\npubsub.subscribe(\n  SocketProtocols.CreateLobbyRequest,\n  createTournamentController,\n);\n","import { SocketProtocols } from '@razor/models';\n\nimport {\n  AllServerPubSubEventsToTypeMap,\n  PubSubEvents,\n  RaceEndModel,\n} from '../models';\nimport { Logger, pubsub } from '../services';\nimport { getCheckRaceEndInstance } from '../utils/check-race-complete';\n\nimport { serverRaceTimeout } from './start-race.controller';\n\nconst logger = new Logger('create-tournament.controller');\n\ntype InformTimeoutArgs =\n  AllServerPubSubEventsToTypeMap[SocketProtocols.InformTimeout];\n\nconst informTimeoutController = ({\n  data,\n  context,\n  playerId,\n}: InformTimeoutArgs): void => {\n  // TODO: Implement a function to get race Id from server itself without passing it from client\n  const { raceId } = data;\n  logger.debug('Player race client timer timed out', context);\n\n  const checkRaceCompleteInstance = getCheckRaceEndInstance(raceId);\n  checkRaceCompleteInstance.addPlayerTimeout(playerId, context);\n\n  // If all players have completed the race, raise RaceEnd event.\n  const isAllPlayersEnded = checkRaceCompleteInstance.isRaceEnded();\n  const raceEndData: RaceEndModel = {\n    context,\n    data: { raceId },\n  };\n  if (isAllPlayersEnded) {\n    pubsub.publish(PubSubEvents.RaceEnd, raceEndData);\n\n    logger.info(\n      'Race ended after all client completed the race by client side.',\n      context,\n    );\n    // Clearing the server timeout when all race players have completed their races from the client side.\n    clearTimeout(serverRaceTimeout);\n  }\n};\n\npubsub.subscribe(SocketProtocols.InformTimeout, informTimeoutController);\n","import { AppPlayerId, AppRaceId } from '@razor/models';\n\nimport { ContextOutput, Logger } from '../services';\n\nconst logger = new Logger('check-race-complete');\n\n/** This is class will be used for detect a specific race has ended by player complete/timeout.\n * When a player send last type log or client timeout event,\n * that player's id will be added to an array.\n */\nclass CheckRaceEnd {\n  private allPlayerIds: AppPlayerId[];\n  private raceEndPlayerIds: AppPlayerId[];\n  private raceTextLength: number;\n\n  constructor(allPlayerIds: AppPlayerId[], raceTextLength: number) {\n    this.allPlayerIds = allPlayerIds;\n    this.raceTextLength = raceTextLength;\n    this.raceEndPlayerIds = [];\n  }\n\n  /** Mark a player as ended the race. */\n  private addPlayer(playerId: AppPlayerId, context: ContextOutput): void {\n    if (!this.allPlayerIds.includes(playerId)) {\n      logger.error('Added a player not included in all player Ids', context);\n      return;\n    }\n\n    if (this.raceEndPlayerIds.includes(playerId)) {\n      logger.error('Player already marked as ended.', context);\n      return;\n    }\n\n    this.raceEndPlayerIds.push(playerId);\n  }\n\n  /** Check all players finished the race */\n  public isRaceEnded(): boolean {\n    return this.raceEndPlayerIds.length === this.allPlayerIds.length;\n  }\n\n  /** Check whether player has completed the race text.\n   * If completed add the player to raceEndPlayerIds.\n   *\n   * @param playerId - Player id to check.\n   * @param lastTextLength - Last text length of the player.\n   * @param context - Logger context\n   *\n   * @returns true; if player already ended the race. false; otherwise.\n   */\n  public checkPlayerHasCompletedRace(\n    playerId: AppPlayerId,\n    lastTextLength: number,\n    context: ContextOutput,\n  ): boolean {\n    // If already ended, do nothing.\n    if (this.raceEndPlayerIds.includes(playerId)) {\n      return true;\n    }\n\n    if (lastTextLength === this.raceTextLength) {\n      this.addPlayer(playerId, context);\n    }\n    return false;\n  }\n\n  /** Add a player ended race by client timeout. */\n  public addPlayerTimeout(playerId: AppPlayerId, context: ContextOutput): void {\n    this.addPlayer(playerId, context);\n  }\n}\n\nconst CheckRaceEndInstances: Record<AppRaceId, CheckRaceEnd> = {};\n\nexport function createCheckRaceEndInstance(\n  raceId: AppRaceId,\n  allPlayerIds: AppPlayerId[],\n  raceTextLength: number,\n): CheckRaceEnd {\n  const instance = new CheckRaceEnd(allPlayerIds, raceTextLength);\n  CheckRaceEndInstances[raceId] = instance;\n  return instance;\n}\n\nexport function getCheckRaceEndInstance(raceId: AppRaceId): CheckRaceEnd {\n  return CheckRaceEndInstances[raceId];\n}\n\nexport function deleteCheckRaceEndInstance(raceId: AppRaceId): void {\n  delete CheckRaceEndInstances[raceId];\n}\n\nexport function viewAllCheckRaceEndInstances(): Record<\n  AppRaceId,\n  CheckRaceEnd\n> {\n  return CheckRaceEndInstances;\n}\n","import { RACE_END_WAIT_TIME } from '@razor/constants';\nimport {\n  AppPlayerId,\n  SocketProtocols,\n  StartRaceAcceptData,\n} from '@razor/models';\nimport { store } from '@razor/store';\n\nimport {\n  AllServerPubSubEventsToTypeMap,\n  PubSubEvents,\n  RaceEndModel,\n  TypeLogListeningModel,\n} from '../models';\nimport { Logger, publishToAllClients, pubsub } from '../services';\nimport { generateRaceText } from '../utils';\nimport { createCheckRaceEndInstance } from '../utils/check-race-complete';\n\nconst logger = new Logger('start-race.controller');\n\ntype StartRaceArgs =\n  AllServerPubSubEventsToTypeMap[SocketProtocols.StartRaceRequest];\n\nexport let serverRaceTimeout: NodeJS.Timeout;\n\nexport const startRaceController = async ({\n  context,\n  playerId,\n  tournamentId,\n}: StartRaceArgs): Promise<void> => {\n  let game = store.getState().game;\n  let tournament = game.tournamentsModel[tournamentId];\n\n  // Check for ongoing races. If there's an ongoing race dismiss the request.\n  let raceIds = tournament.raceIds;\n  let raceId = raceIds[raceIds.length - 1] || null;\n  let race = raceId ? game.racesModel[raceId] : null;\n\n  if (race?.isOnGoing) {\n    logger.info(\n      'The start race request has been dismissed because the tournament currently contains an ongoing race.',\n      context,\n      { onGoingRaceId: raceId },\n    );\n  }\n\n  // Check for two active players in the tournament.\n  if (tournament.playerIds.length < 2) {\n    logger.error(\n      'Tournament does not have at least two active players to start a race.',\n      context,\n    );\n    return;\n  }\n\n  // Generate race text\n  let raceText: string;\n  try {\n    raceText = await generateRaceText();\n  } catch (error) {\n    logger.error(`Race text generation failed, ${error}`, context, { error });\n    return;\n  }\n\n  store.dispatch.game.startRace({\n    tournamentId,\n    playerId,\n    raceText,\n  });\n\n  logger.info('Race started', context, { startedBy: playerId });\n\n  game = store.getState().game;\n  tournament = game.tournamentsModel[tournamentId];\n  raceIds = tournament.raceIds;\n  // Active race id\n  raceId = raceIds[raceIds.length - 1];\n  race = game.racesModel[raceId];\n\n  const startedRaceData: StartRaceAcceptData = {\n    raceId,\n    raceStartedBy: playerId,\n    raceText,\n  };\n\n  publishToAllClients({\n    tournamentId,\n    protocol: SocketProtocols.StartRaceAccept,\n    data: startedRaceData,\n  });\n\n  // Publish start type log listening event\n  const TypeLogListenData: TypeLogListeningModel = {\n    context,\n    data: { raceId },\n  };\n  pubsub.publish(PubSubEvents.StartTypeLogListening, TypeLogListenData);\n\n  // Create an instance for check race end by player complete/timeout\n  const racePlayerIds = Object.keys(race.players) as AppPlayerId[];\n  const raceTextLength = raceText.length;\n  createCheckRaceEndInstance(raceId, racePlayerIds, raceTextLength);\n\n  const raceEndTime = (race.timeoutDuration + RACE_END_WAIT_TIME) * 1000;\n  const raceEndModel: RaceEndModel = {\n    context,\n    data: { raceId },\n  };\n  serverRaceTimeout = setTimeout(() => {\n    logger.info('Race ended triggered by server timeout.', context);\n    pubsub.publish(PubSubEvents.RaceEnd, raceEndModel);\n    clearTimeout(serverRaceTimeout);\n  }, raceEndTime);\n};\n\npubsub.subscribe(SocketProtocols.StartRaceRequest, startRaceController);\n","export * from './authtoken';\nexport * from './generateRaceText';\n","import { v4 as uuidv4, validate, version } from 'uuid';\n\n/**\n * Generate a new auth token using uuid v4.\n * This token will be used to authenticate the player.\n * uuid - https://www.npmjs.com/package/uuid\n */\nexport function generateAuthToken(): string {\n  return uuidv4();\n}\n\n/**\n * Validate the auth token.\n * It will check the uuid version and validate the token.\n * @param token\n */\nexport function validateAuthToken(token: string): boolean {\n  return validate(token) && version(token) === 4;\n}\n","module.exports = require(\"uuid\");","import axios from 'axios';\n\nexport const generateRaceText = async (): Promise<string> => {\n  const url = 'http://www.metaphorpsum.com/paragraphs/1/8';\n  let raceText = '';\n\n  try {\n    const response = await axios.get(url);\n    raceText = response.data;\n\n    // Drop any char that is not a letter, space, comma, period, apostrophe, question mark, or exclamation point.\n    // (Also drop new line)\n    raceText = raceText.replace(/[^a-zA-Z ,.'?!]/g, '');\n\n    return raceText;\n  } catch (e) {\n    throw new Error(e);\n  }\n};\n","module.exports = require(\"axios\");","import {\n  AppPlayer,\n  appPlayerStateToPlayerState,\n  InitialServerData,\n  PlayerJoinData,\n  Snapshot,\n  SocketProtocols,\n  TournamentId,\n} from '@razor/models';\nimport { store } from '@razor/store';\nimport { pick } from 'lodash';\n\nimport { AllServerPubSubEventsToTypeMap } from '../models';\nimport {\n  Logger,\n  publishToAllClients,\n  publishToSingleClient,\n  pubsub,\n} from '../services';\nimport { tokenPlayerMap } from '../stores';\n\nconst logger = new Logger('create-tournament.controller');\n\ntype JoinTournamentArgs =\n  AllServerPubSubEventsToTypeMap[SocketProtocols.JoinLobbyRequest];\n\nconst joinTournamentController = ({\n  data,\n  context,\n  socketId,\n}: JoinTournamentArgs): void => {\n  // Checking whether player already has playerId.\n  let playerId = tokenPlayerMap.getPlayerIdBySocketId(socketId);\n  let player: AppPlayer;\n  if (playerId) {\n    logger.info(\n      'Player already has playerId, checking whether player is available on the store.',\n      context,\n    );\n    player =\n      store.getState().game.playersModel[\n        tokenPlayerMap.getPlayerIdBySocketId(socketId)\n      ];\n  }\n\n  // If player data is not available on the store let new player join to the store.\n  if (!player) {\n    const { playerName, roomId } = data;\n    const receivedTournamentId: TournamentId = `T:${roomId}`;\n    playerId ||= store.dispatch.game.joinPlayer({\n      receivedTournamentId,\n      playerName,\n    });\n    if (!playerId) {\n      logger.error(\"Store didn't send a playerId\", context);\n      // TODO: send error response\n      return;\n    }\n    logger.debug('Player added to the store', context);\n\n    // Adding player to the tokenPlayerMap.\n    tokenPlayerMap.addPlayerId(socketId, playerId);\n    logger.debug('Player added to tokenPlayerMap', context);\n  }\n\n  // Collecting required data from the store.\n  const state = store.getState().game;\n  player ||= state.playersModel[playerId];\n  const tournamentId = player.tournamentId;\n  const tournament = state.tournamentsModel[tournamentId];\n  const playerIds = tournament.playerIds;\n  const raceIds = tournament.raceIds;\n  const lastRaceId = raceIds[raceIds.length - 1];\n  const filteredPlayers = pick(state.playersModel, playerIds);\n  const filteredRaces = pick(state.racesModel, raceIds);\n  const filteredLeaderboards = pick(state.leaderboardsModel, raceIds);\n  let filteredPlayersLogs = {};\n  if (filteredRaces[lastRaceId]?.isOnGoing === true) {\n    const playersLogsIds = playerIds.map(\n      playerId => `${lastRaceId}-${playerId}`,\n    );\n    filteredPlayersLogs = pick(state.playerLogsModel, playersLogsIds);\n  }\n\n  const snapshot: Snapshot = {\n    tournamentsModel: {\n      [tournamentId]: tournament,\n    },\n    playersModel: filteredPlayers,\n    racesModel: filteredRaces,\n    leaderboardsModel: filteredLeaderboards,\n    playerLogsModel: filteredPlayersLogs,\n  };\n\n  const initialServerData: InitialServerData = {\n    playerId,\n    tournamentId,\n    snapshot,\n  };\n\n  publishToSingleClient({\n    playerId,\n    protocol: SocketProtocols.JoinLobbyAccept,\n    data: initialServerData,\n  });\n\n  // Sending player joined event to all players.\n  const joinedPlayerData: PlayerJoinData = {\n    player: {\n      id: playerId,\n      name: player.name,\n      avatarLink: player.avatarLink,\n      state: appPlayerStateToPlayerState(player.state),\n    },\n  };\n\n  publishToAllClients({\n    tournamentId,\n    protocol: SocketProtocols.PlayerJoin,\n    data: joinedPlayerData,\n  });\n};\n\npubsub.subscribe(SocketProtocols.JoinLobbyRequest, joinTournamentController);\n","import { SendLeaderboardData, SocketProtocols } from '@razor/models';\nimport { store } from '@razor/store';\nimport { extractId, ExtractIdType } from '@razor/util';\n\nimport {\n  AllServerPubSubEventsToTypeMap,\n  PubSubEvents,\n  TypeLogListeningModel,\n} from '../models';\nimport { Logger, publishToAllClients, pubsub } from '../services';\n\nconst logger = new Logger('race-end.controller');\n\ntype RaceEndArgs = AllServerPubSubEventsToTypeMap[PubSubEvents.RaceEnd];\n\nexport const raceEndController = ({ context, data }: RaceEndArgs): void => {\n  const { raceId } = data;\n  const tournamentId = extractId(\n    raceId,\n    ExtractIdType.Race,\n    ExtractIdType.Tournament,\n  );\n\n  // Check whether race is already finished.\n  let game = store.getState().game;\n  const race = game.racesModel[raceId];\n  const isEnded = !race.isOnGoing;\n  if (isEnded) {\n    logger.error('Controller tried to end a race already ended.', context);\n    return;\n  }\n\n  // End race in the store.\n  store.dispatch.game.endRace({ raceId });\n  logger.info('Race ended', context);\n\n  // Send leaderboard to all players.\n  game = store.getState().game;\n  const leaderboard = game.leaderboardsModel[raceId];\n  const sendLeaderboardData: SendLeaderboardData = {\n    raceId,\n    leaderboard,\n  };\n  publishToAllClients({\n    tournamentId,\n    protocol: SocketProtocols.SendLeaderboard,\n    data: sendLeaderboardData,\n  });\n\n  // Publish end type log listening event\n  const TypeLogListenData: TypeLogListeningModel = {\n    context,\n    data: { raceId },\n  };\n  pubsub.publish(PubSubEvents.EndTypeLogListening, TypeLogListenData);\n};\n\npubsub.subscribe(PubSubEvents.RaceEnd, raceEndController);\n","export * from './listen-to-client';\nexport * from './send-logs-to-players';\n","import { playerLogsToAppPlayerLogs, SocketProtocols } from '@razor/models';\nimport { store } from '@razor/store';\n\nimport {\n  AllServerPubSubEventsToTypeMap,\n  PubSubEvents,\n  RaceEndModel,\n} from '../../models';\nimport { Logger, pubsub } from '../../services';\nimport { getCheckRaceEndInstance } from '../../utils/check-race-complete';\nimport { serverRaceTimeout } from '../start-race.controller';\n\nimport { getTypeLogsQueue } from './type-log-queues';\n\ntype SendTypeLogControllerArgs =\n  AllServerPubSubEventsToTypeMap[SocketProtocols.SendTypeLog];\n\nconst logger = new Logger('update-type-log.controller/listen-to-client');\n\nexport const sendTypeLogController = ({\n  data,\n  context,\n  playerId,\n}: SendTypeLogControllerArgs): void => {\n  const { raceId, playerLogs } = data;\n\n  if (playerLogs?.length <= 0) {\n    logger.warn('Received an empty type log.', context);\n    return;\n  }\n\n  // Check whether race is ongoing\n  const race = store.getState().game.racesModel[raceId];\n  const isRaceOngoing = race.isOnGoing;\n\n  if (!isRaceOngoing) {\n    logger.warn('Received a type log when specific race is ended.', context);\n    return;\n  }\n\n  // Check the player has ended the race,\n  // if so, add the player to CheckRaceComplete\n  const lastPlayerLog = playerLogs[playerLogs.length - 1];\n  const playerLastTextLength = lastPlayerLog.textLength;\n  const checkRaceCompleteInstance = getCheckRaceEndInstance(raceId);\n  const isPlayerAlreadyEndedRace =\n    checkRaceCompleteInstance.checkPlayerHasCompletedRace(\n      playerId,\n      playerLastTextLength,\n      context,\n    );\n\n  // If player already ended the race, do nothing.\n  // No need to add type logs to queue.\n  if (isPlayerAlreadyEndedRace) {\n    logger.warn('Received type logs from already ended player.', context);\n    return;\n  }\n\n  // If all players have completed the race, raise RaceEnd event.\n  const isAllPlayersEnded = checkRaceCompleteInstance.isRaceEnded();\n  const raceEndData: RaceEndModel = {\n    context,\n    data: { raceId },\n  };\n  if (isAllPlayersEnded) {\n    pubsub.publish(PubSubEvents.RaceEnd, raceEndData);\n\n    logger.info(\n      'Race ended after all client completed the race by client side.',\n      context,\n    );\n    // Clearing the server timeout when all race players have completed their races from the client side.\n    clearTimeout(serverRaceTimeout);\n  }\n\n  store.dispatch.game.sendTypeLog({\n    raceId,\n    playerId,\n    playerLog: playerLogsToAppPlayerLogs(playerLogs),\n  });\n\n  const typeLogsQueue = getTypeLogsQueue(raceId, context);\n  typeLogsQueue.addLog(playerLogs, playerId);\n  logger.debug('Type logs are added to race type-logs-queue.', context);\n};\n\npubsub.subscribe(SocketProtocols.SendTypeLog, sendTypeLogController);\n","import {\n  PlayerId,\n  PlayerLog,\n  PlayerLogsCollection,\n  playerLogsToAppPlayerLogs,\n  RaceId,\n} from '@razor/models';\n\nimport { ContextOutput, Logger } from '../../services';\n\nconst logger = new Logger('update-type-log.controller/type-log-queues');\n\n/** Keeping type logs queues per every race on the server. */\nconst typeLogsQueuesForRaces = new Map<RaceId, TypeLogsQueue>();\n\n/** This class contains player-type-logs for specific race. */\nclass TypeLogsQueue {\n  private logsCollection: PlayerLogsCollection = {};\n\n  /** Add player logs to queue */\n  public addLog(log: PlayerLog[], playerId: PlayerId): void {\n    if (!this.logsCollection[playerId]) {\n      this.logsCollection[playerId] = [];\n    }\n    this.logsCollection[playerId].push(...playerLogsToAppPlayerLogs(log));\n  }\n\n  /** This method will return logs collection stored inside the class. */\n  public getLogsCollection(): PlayerLogsCollection {\n    return this.logsCollection;\n  }\n\n  /** Clear the race logs queue */\n  public clearQueue(): void {\n    this.logsCollection = {};\n  }\n}\n\n/**\n * Create a new type log queue instance for the race\n * @param raceId id of race that the queue is for\n * @returns new instance of TypeLogsQueue\n */\nconst createTypeLogsQueue = (\n  raceId: RaceId,\n  context: ContextOutput,\n): TypeLogsQueue => {\n  const typeLogsQueue = new TypeLogsQueue();\n  typeLogsQueuesForRaces.set(raceId, typeLogsQueue);\n\n  logger.debug('New type-logs-queue created for the race.', context);\n  return typeLogsQueue;\n};\n\n/**\n * Get the type-log-queue instance for the race.\n * If the queue doesn't exist, create a new one.\n * @param raceId id of the race that the queue is for\n * @returns instance of TypeLogsQueue\n */\nexport const getTypeLogsQueue = (\n  raceId: RaceId,\n  context: ContextOutput,\n): TypeLogsQueue => {\n  if (!typeLogsQueuesForRaces.has(raceId)) {\n    return createTypeLogsQueue(raceId, context);\n  }\n  return typeLogsQueuesForRaces.get(raceId);\n};\n\n/**\n * Clear specific type-log-queue instance.\n * @param raceId id of the race which queue should be cleared\n */\nexport const clearTypeLogsQueue = (raceId: RaceId): void => {\n  typeLogsQueuesForRaces.get(raceId)?.clearQueue();\n  delete typeLogsQueuesForRaces[raceId];\n};\n","import { SERVER_TYPE_LOG_INTERVAL } from '@razor/constants';\nimport { AllProtocolToTypeMap, RaceId, SocketProtocols } from '@razor/models';\nimport { extractId, ExtractIdType } from '@razor/util';\n\nimport { AllServerPubSubEventsToTypeMap, PubSubEvents } from '../../models';\nimport {\n  ContextOutput,\n  Logger,\n  publishToAllClients,\n  pubsub,\n} from '../../services';\n\nimport { clearTypeLogsQueue, getTypeLogsQueue } from './type-log-queues';\n\nconst logger = new Logger('update-type-log.controller/send-logs-to-players');\n\n/**\n * Sends the collected logs to all players at a specific interval.\n */\nexport const typeLogPusher = (\n  raceId: RaceId,\n  context: ContextOutput,\n): (() => void) => {\n  const timer = setInterval(() => {\n    const logsQueue = getTypeLogsQueue(raceId, context);\n    const logsCollection = logsQueue.getLogsCollection();\n    const isLogsCollectionEmpty =\n      logsCollection == null || Object.keys(logsCollection).length === 0;\n\n    if (!isLogsCollectionEmpty) {\n      const data: AllProtocolToTypeMap[SocketProtocols.UpdateTypeLogs] = {\n        raceId: raceId,\n        playerLogs: logsCollection,\n      };\n\n      const tournamentId = extractId(\n        raceId,\n        ExtractIdType.Race,\n        ExtractIdType.Tournament,\n      );\n\n      publishToAllClients({\n        tournamentId: tournamentId,\n        protocol: SocketProtocols.UpdateTypeLogs,\n        data,\n      });\n      logsQueue.clearQueue();\n    }\n  }, SERVER_TYPE_LOG_INTERVAL);\n\n  return (): void => {\n    clearInterval(timer);\n    clearTypeLogsQueue(raceId);\n    logger.info(\n      'Type log pusher destroyed and queue cleared after race end.',\n      context,\n    );\n  };\n};\n\nconst flushAllAfterRaceEnd = (\n  destroyTypeLogPusher: () => void,\n  context: ContextOutput,\n): void => {\n  pubsub.unsubscribe(PubSubEvents.StartTypeLogListening, destroyTypeLogPusher);\n  pubsub.unsubscribe(PubSubEvents.EndTypeLogListening, (_): void =>\n    flushAllAfterRaceEnd(destroyTypeLogPusher, context),\n  );\n  destroyTypeLogPusher();\n};\n\ntype StartTypeLogListeningArgs =\n  AllServerPubSubEventsToTypeMap[PubSubEvents.StartTypeLogListening];\ntype EndTypeLogListeningArgs =\n  AllServerPubSubEventsToTypeMap[PubSubEvents.EndTypeLogListening];\n\nconst typeLogPushController = ({\n  data,\n  context,\n}: StartTypeLogListeningArgs): void => {\n  logger.info('Started type log listening', context);\n  const { raceId: startTypeLogEventRaceId } = data;\n  const destroyTypeLogPusher = typeLogPusher(startTypeLogEventRaceId, context);\n  pubsub.subscribe(\n    PubSubEvents.EndTypeLogListening,\n    ({ data }: EndTypeLogListeningArgs): void => {\n      const { raceId: endTypeLogEventRaceId } = data;\n      // If race ids are equal flush all and destroy the type log pusher.\n      if (startTypeLogEventRaceId == endTypeLogEventRaceId) {\n        flushAllAfterRaceEnd(destroyTypeLogPusher, context);\n      }\n    },\n  );\n};\n\npubsub.subscribe(PubSubEvents.StartTypeLogListening, typeLogPushController);\n","import { SocketProtocols } from '@razor/models';\nimport { Server, Socket } from 'socket.io';\n\nimport { checkReconnected, Logger, publishOnReceive } from './services';\nimport { MapData, tokenPlayerMap } from './stores';\nimport { generateAuthToken, validateAuthToken } from './utils';\n\nconst logger = new Logger('manage-socket-connections');\n\n/**\n * Handling received socket events.\n * @param socket Socket instance\n * @param socketServer Socket.io server instance\n */\nexport function manageSocketConnections(\n  socket: Socket,\n  socketServer: Server,\n): void {\n  const context = logger.createContext({ identifier: socket.id });\n\n  logger.info('User connected', context);\n\n  // Take the token from the handshake.\n  const token = socket.handshake.auth.token;\n\n  let playerData: MapData = null;\n  if (token) {\n    if (validateAuthToken(token)) {\n      playerData = tokenPlayerMap.getPlayer(token);\n      logger.debug('Valid token received from client.', context);\n      logger.debug(\n        `User is ${playerData ? 'found' : 'not found'} in map.`,\n        context,\n      );\n    } else {\n      logger.debug('Invalid token received from client.', context);\n    }\n  } else {\n    logger.debug('No token received from client.', context);\n  }\n\n  let newToken = '';\n  if (!playerData) {\n    // If player is new token will be generated and sent to the client.\n    newToken = generateAuthToken();\n    socket.emit(SocketProtocols.AuthTokenTransfer, newToken);\n    // New player will be added with related socket id to the map.\n    tokenPlayerMap.addSocketId(newToken, socket.id);\n    const context = logger.createContext({ identifier: socket.id });\n    logger.debug('New user added to map.', context);\n  } else {\n    // If player is already in the map then update the socket id.\n    tokenPlayerMap.updatePlayerSocketId(token, socket.id);\n    const { playerId } = playerData;\n    const context = logger.createContext({ identifier: playerId });\n    logger.debug('User updated with a new socket in map.', context);\n  }\n\n  // On any socket event publish the event with playerId and data.\n  socket.onAny((event, data) => publishOnReceive({ event, data, socket }));\n\n  // If a user disconnected call the reconnect function.\n  socket.on('disconnect', () => {\n    const playerId = tokenPlayerMap.getPlayerIdBySocketId(socket.id);\n    const authToken = tokenPlayerMap.getAuthTokenBySocketId(socket.id);\n    const context = logger.createContext({ identifier: playerId });\n    logger.info('User disconnected.', context);\n    if (authToken) {\n      checkReconnected(authToken, socketServer);\n    }\n  });\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { store } from '@razor/store';\nimport express from 'express';\nimport http from 'http';\nimport { Server } from 'socket.io';\n\nimport './controllers';\n\nimport { viewAllCheckRaceEndInstances } from './utils/check-race-complete';\nimport { emitSocketMessages } from './services';\nimport { manageSocketConnections } from './socket';\nimport { tokenPlayerMap } from './stores';\n\nconst app = express();\nconst port = process.env.PORT || 3000;\nconst server = http.createServer(app);\n\napp.get('/', (req, res) => {\n  const storeState = store.getState();\n  res.send(storeState);\n});\n\napp.get('/token-player-map', (req, res) => {\n  const data = tokenPlayerMap.viewMap();\n  res.send(data);\n});\n\napp.get('/ongoing-race-data', (req, res) => {\n  const data = viewAllCheckRaceEndInstances();\n  res.send(data);\n});\n\nconst allowedOrigin =\n  process.env.NX_ALLOWED_ORIGINS?.split(', ') || 'http://localhost:4200';\n\nconst socketServer = new Server(server, {\n  cors: {\n    origin: allowedOrigin,\n    methods: ['GET', 'POST'],\n    credentials: true,\n  },\n});\n\nsocketServer.on('connection', socket =>\n  manageSocketConnections(socket, socketServer),\n);\n\nserver.listen(port, () => {\n  console.log(`App listening on port http://localhost:${port}`);\n});\n\nemitSocketMessages(socketServer);\n"],"names":[],"sourceRoot":""}